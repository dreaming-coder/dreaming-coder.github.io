import{_ as s,o as n,c as a,a as l}from"./app.e791da42.js";const o="/imgs/golang/syntax/syntax-001.png",d=JSON.parse('{"title":"GoLang 基本语法","description":"","frontmatter":{},"headers":[{"level":2,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":2,"title":"基础类型","slug":"基础类型","link":"#基础类型","children":[{"level":3,"title":"整型","slug":"整型","link":"#整型","children":[]},{"level":3,"title":"浮点型","slug":"浮点型","link":"#浮点型","children":[]},{"level":3,"title":"复数","slug":"复数","link":"#复数","children":[]},{"level":3,"title":"布尔型","slug":"布尔型","link":"#布尔型","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":3,"title":"type 关键字","slug":"type-关键字","link":"#type-关键字","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"简短变量声明","slug":"简短变量声明","link":"#简短变量声明","children":[]},{"level":3,"title":"声明指针","slug":"声明指针","link":"#声明指针","children":[]},{"level":3,"title":"new函数声明","slug":"new函数声明","link":"#new函数声明","children":[]},{"level":3,"title":"变量的生命周期","slug":"变量的生命周期","link":"#变量的生命周期","children":[]}]},{"level":2,"title":"常量","slug":"常量","link":"#常量","children":[{"level":3,"title":"iota 常量生成器","slug":"iota-常量生成器","link":"#iota-常量生成器","children":[]}]},{"level":2,"title":"赋值","slug":"赋值","link":"#赋值","children":[{"level":3,"title":"元组赋值","slug":"元组赋值","link":"#元组赋值","children":[]},{"level":3,"title":"可赋值性","slug":"可赋值性","link":"#可赋值性","children":[]}]},{"level":2,"title":"值类型和引用类型","slug":"值类型和引用类型","link":"#值类型和引用类型","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"复合赋值运算符","slug":"复合赋值运算符","link":"#复合赋值运算符","children":[]},{"level":3,"title":"指针和地址运算符","slug":"指针和地址运算符","link":"#指针和地址运算符","children":[]}]},{"level":2,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"包注释","slug":"包注释","link":"#包注释","children":[]},{"level":3,"title":"结构（接口）注释","slug":"结构-接口-注释","link":"#结构-接口-注释","children":[]},{"level":3,"title":"函数（方法）注释","slug":"函数-方法-注释","link":"#函数-方法-注释","children":[]},{"level":3,"title":"代码逻辑注释","slug":"代码逻辑注释","link":"#代码逻辑注释","children":[]},{"level":3,"title":"注释风格","slug":"注释风格","link":"#注释风格","children":[]}]}],"relativePath":"md/golang/go-syntax.md","lastUpdated":1674730622000}'),p={name:"md/golang/go-syntax.md"},e=l(`<h1 id="golang-基本语法" tabindex="-1">GoLang 基本语法 <a class="header-anchor" href="#golang-基本语法" aria-hidden="true">#</a></h1><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-hidden="true">#</a></h2><ul><li><strong>字母或下划线开头</strong></li><li><strong>之后只能出现数字、字母、下划线</strong></li><li><strong>大小写敏感</strong></li></ul><p><em><strong>Go 语言关键字</strong></em></p><table><thead><tr><th style="text-align:center;">break</th><th style="text-align:center;">default</th><th style="text-align:center;">func</th><th style="text-align:center;">interface</th><th style="text-align:center;">select</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>case</strong></td><td style="text-align:center;"><strong>defer</strong></td><td style="text-align:center;"><strong>go</strong></td><td style="text-align:center;"><strong>map</strong></td><td style="text-align:center;"><strong>struct</strong></td></tr><tr><td style="text-align:center;"><strong>chan</strong></td><td style="text-align:center;"><strong>else</strong></td><td style="text-align:center;"><strong>goto</strong></td><td style="text-align:center;"><strong>package</strong></td><td style="text-align:center;"><strong>switch</strong></td></tr><tr><td style="text-align:center;"><strong>const</strong></td><td style="text-align:center;"><strong>fallthrough</strong></td><td style="text-align:center;"><strong>if</strong></td><td style="text-align:center;"><strong>range</strong></td><td style="text-align:center;"><strong>type</strong></td></tr><tr><td style="text-align:center;"><strong>continue</strong></td><td style="text-align:center;"><strong>for</strong></td><td style="text-align:center;"><strong>import</strong></td><td style="text-align:center;"><strong>return</strong></td><td style="text-align:center;"><strong>var</strong></td></tr></tbody></table><p>此外，还有大约30多个预定义的名字，比如 <code>int</code> 和 <code>true</code> 等，主要对应内建的常量、类型和函数：</p><ul><li><p>内建常量:</p><p><code>true</code>、<code>false</code>、<code>iota</code>、<code>nil</code></p></li><li><p>内建类型:</p><p><code>int</code>、<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code></p><p><code>uint</code>、<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>、<code>uintptr</code></p><p><code>float32</code>、<code>float64</code>、<code>complex128</code>、<code>complex64</code></p><p><code>bool</code>、<code>byte</code>、<code>rune</code>、<code>string</code>、<code>error</code></p></li><li><p>内建函数:</p><p><code>make</code>、<code>len</code>、<code>cap</code>、<code>new</code>、<code>append</code>、<code>copy</code>、<code>close</code>、<code>delete</code></p><p><code>complex</code>、<code>real</code>、<code>imag</code></p><p><code>panic</code>、<code>recover</code></p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这些内部预先定义的名字并不是关键字，你可以在定义中重新使用它们。在一些特殊的场景中重新定义它们也是有意义的，但是也要注意避免过度而引起语义混乱。</p></div><p>标识符一般使用<strong>驼峰命名法</strong>：</p><ul><li>变量名：<code>xxxYyyZzz</code></li><li>常量名：<code>XXX_YYY_ZZZ</code></li><li>函数名：<code>XxxYyyZzz</code></li><li>方法名：<code>XxxYyyZzz</code></li><li>包名：一般是小写字母组成</li></ul><blockquote><p>有些有特殊含义的缩写单词要字母全大写，如 <code>ID</code>，<code>HTTP</code> 等。</p></blockquote><h2 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-hidden="true">#</a></h2><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">符号</th><th>长度范围</th></tr></thead><tbody><tr><td style="text-align:center;">uint8</td><td style="text-align:center;">无符号</td><td>8位整型 (0 到 255)</td></tr><tr><td style="text-align:center;">uint16</td><td style="text-align:center;">无符号</td><td>16位整型 (0 到 65535)</td></tr><tr><td style="text-align:center;">uint32</td><td style="text-align:center;">无符号</td><td>32位整型 (0 到 4294967295)</td></tr><tr><td style="text-align:center;">uint64</td><td style="text-align:center;">无符号</td><td>64位整型 (0 到 18446744073709551615)</td></tr><tr><td style="text-align:center;">int8</td><td style="text-align:center;">有符号</td><td>8位整型 (-128 到 127)</td></tr><tr><td style="text-align:center;">int16</td><td style="text-align:center;">有符号</td><td>16位整型 (-32768 到 32767)</td></tr><tr><td style="text-align:center;">int32</td><td style="text-align:center;">有符号</td><td>32位整型 (-2147483648 到 2147483647)</td></tr><tr><td style="text-align:center;">int64</td><td style="text-align:center;">有符号</td><td>64位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><blockquote><ul><li><p><code>Unicode</code> 字符 <code>rune</code> 类型是和 <code>int32</code> 等价的类型(别名)，通常用于表示一个 Unicode 码点，主要用于表示一个字符类型大于一个字节小于等于 4 个字节的情况下，特别是<strong>中文字符。</strong></p><p><strong>Go 语言中，没有字符类型，用整型来存储，一样是单引号表示。</strong></p></li><li><p>同样 <code>byte</code> 也是 <code>uint8</code> 类型的等价类型(别名)，<strong><code>byte</code> 类型一般用于强调数值是一个原始的数据而不是一个小的整数。</strong></p></li></ul></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>有符号整数采用补码表示</strong></p></div><p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint </code> 和 <code>uintptr</code>(无符号整形，用于存放一个指针)，这些类型的长度都是根据运行程序所在的操作系统类型所决定的。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>不管它们的具体大小，<code>int</code>、<code>uint</code> 和 <code>uintptr</code> 是不同类型的兄弟类型</strong>。其中 <code>int</code> 和 <code>int32</code> 也是不同的类型，即使 <code>int</code> 的大小也是 32 bit，在需要将 <code>int</code> 当作 <code>int32</code> 类型的地方<strong>需要一个显式的类型转换操作</strong>，反之亦然。</p></div><h3 id="浮点型" tabindex="-1">浮点型 <a class="header-anchor" href="#浮点型" aria-hidden="true">#</a></h3><p>主要是为了表示小数，也可细分为 <code>float32</code> 和 <code>float64</code> 两种。浮点数能够表示的范围可以从很小到很巨大，这个极限值范围可以在 <code>math</code> 包中获取，<code>math.MaxFloat32</code> 表示 <code>float32</code> 的最大值，大约是 <code>3.4e38</code>，<code>math.MaxFloat64</code> 大约是 <code>1.8e308</code>，两个类型最小的非负值大约是 <code>1.4e-45</code> 和 <code>4.9e-324</code>。</p><p><code>float32 </code>大约可以提供 6 位有效数字的精度，作为对比，<code>float64</code> 可以提供 16 位有效数字的精度。通常情况应该优先选择 <code>float64</code>，因为 <code>float32</code> 的精确度较低，在累积计算时误差扩散很快，而且 <code>float32</code> 能精确表达的最小正整数并不大，<strong>浮点数和整数的底层解释方式完全不同</strong>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><p>不要对浮点型进行 <code>==</code> 判断，因为本身就是近似存储</p></li><li><p>截取有效数字默认是五舍六入</p></li></ul></div><p>小数点前面或后面的零都可以被省略（例如 <code>.707</code> 或 <code>1.</code>）。很小或很大的数最好用科学计数法书写，通过 <code>e</code> 或 <code>E</code> 来指定指数部分：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Avogadro </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6.02214129e23</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 阿伏伽德罗常数</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Planck </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6.62606957E</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 普朗克常数</span></span>
<span class="line"></span></code></pre></div><h3 id="复数" tabindex="-1">复数 <a class="header-anchor" href="#复数" aria-hidden="true">#</a></h3><p>Go 语言提供了两种精度的复数类型：<code>complex64</code> 和 <code>complex128</code>，分别对应 <code>float32</code> 和 <code>float64</code> 两种浮点数精度。内置的 <code>complex</code> 函数用于构建复数，内建的 <code>real</code> 和 <code>imag</code> 函数分别返回复数的实部和虚部：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#C792EA;">complex128</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">complex</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 1+2i</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">complex128</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">complex</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 3+4i</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;">// (-5+10i)</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">real</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">// -5</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">imag</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">// 10</span></span>
<span class="line"></span></code></pre></div><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个 <code>i</code>，例如 <code>3.141592i</code> 或 <code>2i</code>，它将构成一个复数的虚部，复数的实部是 <code>0</code>：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// (-1+0i), i^2 = -1</span></span>
<span class="line"></span></code></pre></div><p>在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚部），我们可以用自然的方式书写复数，就像 <code>1+2i</code> 或与之等价的写法 <code>2i+1</code>。上面 <code>x</code> 和 <code>y</code> 的声明语句还可以简化：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2i</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4i</span></span>
<span class="line"></span></code></pre></div><p>复数也可以用 <code>==</code> 和 <code>!=</code> 进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等的。</p><blockquote><p><strong>浮点数的相等比较是危险的，需要特别小心处理精度问题。</strong></p></blockquote><h3 id="布尔型" tabindex="-1">布尔型 <a class="header-anchor" href="#布尔型" aria-hidden="true">#</a></h3><p>一个布尔类型的值只有两种：<code>true</code> 和 <code>false</code>。<code>if</code> 和 <code>for</code> 语句的条件部分都是布尔类型的值，并且 <code>==</code> 和 <code>&lt;</code> 等比较操作也会产生布尔型的值。一元操作符 <code>!</code> 对应逻辑非操作，因此 <code>!true</code> 的值为 <code>false</code>。</p><p><strong>布尔值并不会隐式转换为数字值 0 或 1，反之亦然</strong>。必须使用一个显式的 <code>if</code> 语句辅助转换：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果需要经常做类似的转换, 包装成一个函数会更方便:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// btoi returns 1 if b is true and 0 if false.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">btoi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">b </span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>数字到布尔型的逆转换则非常简单, 不过为了保持对称, 我们也可以包装一个函数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// itob reports whether i is non-zero.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">itob</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h3><p>字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。UTF-8 是被广泛使用的编码格式，是文本文件的标准编码，其它包括 XML 和 JSON 在内，也都使用该编码。由于该编码对占用字节长度的不定性，Go 中的字符串里面的字符也可能根据需要占用 1 至 4 个字节，这与其它语言如 C++、Java 或者 Python 不同（Java 始终使用 2 个字节）。Go 这样做的好处是不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>字符串是一种值类型，且值不可变，即创建某个文本后你无法再次修改这个文本的内容；更深入地讲，字符串是字节的定长数组。</strong></p></div><p>Go 支持以下 2 种形式的字符串：</p><ul><li><p><strong>解释字符串</strong>：</p><p>该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：</p><ul><li><code>\\n</code>：换行符</li><li><code>\\r</code>：回车符</li><li><code>\\t</code>：tab 键</li><li><code>\\u</code> 或 <code>\\U</code>：Unicode 字符</li><li><code>\\\\</code>：反斜杠自身</li></ul></li><li><p><strong>非解释字符串</strong>：</p><p>该类字符串使用反引号括起来，支持换行，并且禁止转义，例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">This is a raw string \\n</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 中的 </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">\\n</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> 会被原样输出。</span></span>
<span class="line"></span></code></pre></div></li></ul><p><strong>内置的 <code>len()</code> 函数可以返回一个字符串中的字节数目（不是 <code>rune</code> 字符数目）</strong>，索引操作 <code>s[i]</code> 返回第 <code>i</code> 个字节的字节值，<strong><code>i</code> 必须满足 <code>0 ≤ i &lt; len(s)</code> 条件约束</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> s </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;12&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;104 119&quot; (&#39;h&#39; and &#39;w&#39;)</span></span>
<span class="line"></span></code></pre></div><p>如果试图访问超出字符串索引范围的字节将会导致 <code>panic</code> 异常：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// panic: index out of range</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>第 <code>i</code> 个字节并不一定是字符串的第 <code>i</code> 个字符，因为对于非 <code>ASCII</code> 字符的 <code>UTF8</code> 编码会要两个或多个字节。</p></div><p><code>+</code> 操作符可以连接 2 个不同的字符串：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">:])</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;goodbye, world&quot;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>只能连接字符串，不能连接字符串和其他类型，比如字符串和数字，是不能编译的</strong></p><p>另外，如果拼接字符串涉及到换行，<code>+</code> 必须放在一行的结尾，不然 Go 编译器自动会添加分号报错</p></div><p><strong>字符串可以用 <code>==</code> 和 <code>&lt;</code> 进行比较；比较通过逐个字节比较完成的，因此比较的结果是字符串自然编码的顺序</strong>。</p><p><strong>字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变</strong>，当然我们也可以给一个字符串变量分配一个新字符串值。可以像下面这样将一个字符串追加到另一个字符串：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">left foot</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> s</span></span>
<span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, right foot</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>这并不会导致原始的字符串值被改变，但是变量 <code>s</code> 将因为 <code>+=</code> 语句持有一个新的字符串值，但是 <code>t</code> 依然是包含原先的字符串值。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;left foot, right foot&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;left foot&quot;</span></span>
<span class="line"></span></code></pre></div><p>因为字符串是不可修改的，因此尝试修改字符串内部数据的操作也是被禁止的：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">L</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// compile error: cannot assign to s[0]</span></span>
<span class="line"></span></code></pre></div><p><strong>不变性意味如果两个字符串共享相同的底层数据的话也是安全的</strong>，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串 <code>s</code> 和对应的子字符串切片 <code>s[7:]</code> 的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。</p><blockquote><p><strong>获取字符串中某个字节的地址的行为是非法的，例如：<code>&amp;str[i]</code>。</strong></p></blockquote><h3 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-hidden="true">#</a></h3><p>一个指针变量可以指向任何一个值的内存地址。指针变量在 32 位计算机上占用 4B 内存，在 64 位计算机占用 8B内存，并且与它所指向的值的大小无关，因为指针变量只是地址的值而已。可以声明指针指向任何类型的值来表明它的原始性或结构性，也可以在指针类型前面加上 <code>*</code> 号（前缀）来获取指针所指向的内容。</p><p>在 Go 语言中，指针类型表示指向给定类型（称为指针的基础类型）的变量的所有指针的集合。 符号 <code> *</code> 可以放在一个类型前，如 <code>*T</code>，那么它将以类型 <code>T</code> 为基础，生成指针类型 <code>*T</code>。未初始化指针的值为 <code>nil</code>。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Point3D</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> z </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> pointer </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Point3D</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">*[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">int</span></span>
<span class="line"></span></code></pre></div><blockquote><p>上面定义了两个指针类型变量。它们的值为 <code>nil</code>，这时对它们的反向引用是不合法的，并且会使程序崩溃。</p></blockquote><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">// in Windows: stops only with: &lt;exit code=&quot;-1073741819&quot; msg=&quot;process crashed&quot;/&gt;</span></span>
<span class="line"><span style="color:#676E95;">// runtime error: invalid memory address or nil pointer dereference</span></span>
<span class="line"></span></code></pre></div><p>虽然 Go 语言和 C、C++ 这些语言一样，都有指针的概念，但是<strong>指针运算在语法上是不允许的</strong>。这样做的目的是保证内存安全。从这一点看，Go 语言的指针基本就是一种引用。</p><p>指针的一个高级应用是可以传递一个变量的引用（如函数的参数），这样不会传递变量的副本。当调用函数时，如果参数为基础类型，传进去的是值，也就是另外复制了一份参数到当前的函数调用栈。参数为引用类型时，传进去的基本都是引用。而指针传递的成本很低，只占用 4B 或 8B 内存。</p><p>如果代码在运行中需要占用大量的内存，或很多变量，或者两者都有，这时使用指针会减少内存占用和提高运行效率。被指向的变量保存在内存中，直到没有任何指针指向它们。所以从它们被创建开始就具有相互独立的生命周期。</p><p>内存管理中的内存区域一般包括堆内存（heap）和栈内存（stack）， 栈内存主要用来存储当前调用栈用到的简单类型数据，如<code>string</code>，<code>bool</code>，<code>int</code>，<code>float </code> 等。这些类型基本上较少占用内存，容易回收，因此可以直接复制，进行垃圾回收时也比较容易做针对性的优化。 而复杂的复合类型占用的内存往往相对较大，存储在堆内存中，垃圾回收频率相对较低，代价也较大，因此传引用或指针可以避免进行成本较高的复制操作，并且节省内存，提高程序运行效率。</p><p><strong>指针的使用方法：</strong></p><ul><li>定义指针变量</li><li>为指针变量赋值</li><li>访问指针变量中指向地址的值</li><li>在指针类型前面加上 <code>*</code> 号来获取指针所指向的内容</li></ul><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 声明实际变量</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> ptra </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;">// 声明指针变量</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> ptrb </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	ptra </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">a </span><span style="color:#676E95;">// 指针变量赋值的是变量的地址</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a  变量的地址是: %x</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// c00000a0c8</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b  变量的地址是: %x</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// c00000a0e0</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">// 指针变量指向的存储地址</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ptra  指向的存储地址: %x</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ptra</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// c00000a0c8</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ptrb  指向的存储地址: %x</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ptrb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// c00000a0e0</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">// 使用指针访问值</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*ptra  变量的值: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ptra</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 20</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*ptrb  变量的值: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ptrb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 30</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="type-关键字" tabindex="-1">type 关键字 <a class="header-anchor" href="#type-关键字" aria-hidden="true">#</a></h3><p><strong>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构</strong>。<strong>新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">新类型</span><span style="color:#A6ACCD;"> 底层类型  </span><span style="color:#676E95;">// 自定义类型，本质2个类型</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">别名</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 已有类型  </span><span style="color:#676E95;">// 类型别名，本质一个类型</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型声明语句一般出现在包一级，因此如果新创建的类型名字的<strong>首字符大写</strong>，则在<strong>外部包也可以使用</strong>。</p></div><p>为了说明类型声明，我们将不同温度单位分别定义为不同的类型：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Package tempconv performs Celsius and Fahrenheit temperature computations.</span></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tempconv</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Celsius</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 摄氏温度</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fahrenheit</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 华氏温度</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    AbsoluteZeroC Celsius </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">273.15</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 绝对零度</span></span>
<span class="line"><span style="color:#A6ACCD;">    FreezingC Celsius </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;">// 结冰点温度</span></span>
<span class="line"><span style="color:#A6ACCD;">    BoilingC Celsius </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// 沸水温度</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CToF</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c Celsius</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> Fahrenheit </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fahrenheit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FToC</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f Fahrenheit</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> Celsius </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Celsius</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">f </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们在这个包声明了两种类型：<code>Celsius</code> 和 <code>Fahrenheit</code> 分别对应不同的温度单位。<strong>它们虽然有着相同的底层类型 <code>float64</code>，但是它们是不同的数据类型，因此它们不可以被相互比较或混在一个表达式运算</strong>。</p><p>刻意区分类型，可以避免一些像无意中使用不同单位的温度混合计算导致的错误；因此需要一个类似 <code>Celsius(t)</code> 或 <code>Fahrenheit(t)</code> 形式的显式转型操作才能将 <code>float64</code> 转为对应的类型。</p><p><code>Celsius(t)</code> 和 <code>Fahrenheit(t)</code> 是类型转换操作，它们并不是函数调用。<strong>类型转换不会改变值本身，但是会使它们的语义发生变化</strong>。另一方面，<code>CToF</code> 和 <code>FToC</code> 两个函数则是对不同温度单位下的温度进行换算，它们会<strong>返回不同的值</strong>。</p><p>对于每一个类型T，都有一个对应的类型转换操作 <code>T(x)</code>，用于将 <code>x</code> 转为 <code>T</code> 类型（如果 <code>T</code> 是指针类型，可能会需要用小括弧包装 <code>T</code>，比如 <code>(*int)(0)</code> ）。<strong>只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身</strong>。如果 <code>x</code> 是可以赋值给 <code>T</code> 类型的值，那么 <code>x</code> 必然也可以被转为 <code>T</code> 类型，但是一般没有这个必要。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在任何情况下，运行时不会发生转换失败的错误（ 错误只会发生在编译阶段）</p></div><p>底层数据类型决定了内部结构和表达方式，也决定是否可以像底层类型一样对内置运算符的支持。这意味着，<code>Celsius</code> 和 <code>Fahrenheit</code> 类型的算术运算行为和底层的 <code>float64</code> 类型是一样的，正如我们所期望的那样。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%g</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BoilingC</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">FreezingC</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;">// &quot;100&quot; °C</span></span>
<span class="line"><span style="color:#A6ACCD;">boilingF </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CToF</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BoilingC</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%g</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> boilingF</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">CToF</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FreezingC</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;180&quot; °F</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%g</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> boilingF</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">FreezingC</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;">// compile error: type mismatch</span></span>
<span class="line"></span></code></pre></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-hidden="true">#</a></h3><p><code>var</code> 声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。变量声明的一般语法如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> 变量名字 类型 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 表达式</span></span>
<span class="line"></span></code></pre></div><p>其中 “类型” 或 “= 表达式” 两个部分可以省略其中的一个</p><blockquote><p>如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。如果初始化表达式被省略，那么将用零值初始化该变量。</p><p>数值类型变量对应的零值是 <code>0</code>，布尔类型变量对应的零值是 <code>false</code>，字符串类型对应的零值是 <code>空字符串</code>，接口或引用类型（包括 <code>slice</code>、<code>map</code>、<code>chan</code> 和 <code>函数</code>）变量对应的零值是 <code>nil</code>。数组或结构体等聚合类型对应的零值是每个元素或字段都是对应该类型的零值。</p></blockquote><p>也可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。如果省略每个变量的类型，将可以声明多个类型不同的变量（类型由初始化表达式推导）：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// int, int, int</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">four</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// bool, float64, string</span></span>
<span class="line"></span></code></pre></div><blockquote><p>初始化表达式可以是字面量或任意的表达式。在包级别声明的变量会在 main 入口函数执行前完成初始化，局部变量将在声明语句被执行到的时候完成初始化。</p></blockquote><p>一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// os.Open returns a file and an error</span></span>
<span class="line"></span></code></pre></div><p>还可以这样声明变量：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	a </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">	b </span><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#A6ACCD;">	str </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这种因式分解关键字的写法一般用于声明全局变量。</p></blockquote><h3 id="简短变量声明" tabindex="-1">简短变量声明 <a class="header-anchor" href="#简短变量声明" aria-hidden="true">#</a></h3><p>在函数内部，有一种称为简短变量声明语句的形式可用于声明和初始化局部变量。它的形式为：</p><p><code>名字:= 表达式</code>，变量的类型根据表达式来自动推导。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">anim </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> gif</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GIF</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">LoopCount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> nframes</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">freq </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> rand</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Float64</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span></span>
<span class="line"><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span></span>
<span class="line"></span></code></pre></div><p>因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。<strong>var 形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初值无关紧要的地方</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// an int</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> boiling </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// a float64</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> names </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> p Point</span></span>
<span class="line"></span></code></pre></div><p>和 <code>var</code> 形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这种同时声明多个变量的方式应该限制只在可以提高代码可读性的地方使用，比如 <code>for</code> 语句的循环的初始化语句部分。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>请记住，<code>:=</code> 是一个变量声明语句，而 <code>=</code> 是一个变量赋值操作</strong></p></div><p>和普通 <code>var</code> 形式的变量声明语句一样，简短变量声明语句也可以用函数的返回值来声明和初始化变量，像下面的 <code>os.Open</code> 函数调用将返回两个值：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">// ...use f...</span></span>
<span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>这里有一个比较微妙的地方：简短变量声明左边的变量可能并不是全部都是刚刚声明的。<strong>如果有一些已经在 <code>相同的词法域</code> 声明过了，那么简短变量声明语句对这些已经声明过的变量就只有赋值行为了</strong>。</p><p>在下面的代码中，第一个语句声明了 <code>in</code> 和 <code>err</code> 两个变量。在第二个语句只声明了 <code>out</code> 一个变量，然后对已经声明的 <code>err</code> 进行了赋值操作。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">infile</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">outfile</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>简短变量声明语句中必须至少要声明一个新的变量</strong>，下面的代码将不能编译通过：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">infile</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">outfile</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// compile error: no new variables</span></span>
<span class="line"></span></code></pre></div><p>解决的方法是第二个简短变量声明语句改用普通的多重赋值语言(就是换成 <code>=</code> 号)</p></div><p>简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量。<strong>这里我的理解是，命名空间不同的位置可以出现同名标识符。</strong></p><h3 id="声明指针" tabindex="-1">声明指针 <a class="header-anchor" href="#声明指针" aria-hidden="true">#</a></h3><p>一个变量对应一个保存了变量对应类型值的内存空间。普通变量在声明语句创建时被绑定到一个变量名，比如叫 <code>x</code> 的变量，但是还有很多变量始终以表达式方式引入，例如 <code>x[i]</code> 或 <code>x.f</code> 变量。所有这些表达式一般都是读取一个变量的值，除非它们是出现在赋值语句的左边，这种时候是给对应变量赋予一个新的值。</p><p><strong>一个指针的值是另一个变量的地址</strong>。一个指针对应变量在内存中的存储位置。并不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址。通过指针，我们可以直接读或更新对应变量的值，而不需要知道该变量的名字（如果变量有名字的话）。</p><p>如果用 <code>var x int</code> 声明语句声明一个 <code>x</code> 变量，那么 <code>&amp;x</code> 表达式（取 <code>x</code> 变量的内存地址）将产生一个指向该整数变量的指针，指针对应的数据类型是 <code> *int</code> ，指针被称之为“指向 <code>int</code> 类型的指针”。如果指针名字为 <code>p</code>，那么可以说“<code>p</code> 指针指向变量 <code>x</code>”，或者说“<code>p</code> 指针保存了 <code>x</code> 变量的内存地址”。同时 <code>*p </code>表达式对应 <code>p</code> 指针指向的变量的值。一般 <code>*p</code> 表达式读取指针指向的变量的值，这里为 <code>int</code> 类型的值，同时因为 <code>*p</code> 对应一个变量，所以<strong>该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">x </span><span style="color:#676E95;">// p, of type *int, points to x</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;1&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// equivalent to x = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;2&quot;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>对于聚合类型每个成员，比如结构体的每个字段、或者是数组的每个元素，也都是对应一个变量，因此可以被取地址。</p></blockquote><p>任何类型的指针的零值都是 <code>nil</code>。如果 <code>p != nil </code> 测试为真，那么 <code>p</code> 是指向某个有效变量。指针之间也是可以进行相等测试的，只有当它们指向同一个变量或全部是 <code>nil</code> 时才相等。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;true false false&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">//&lt;nil&gt; &lt;nil&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这里注意，<code>var a, b *int</code> 声明后 <code>a</code> 和 <code>b</code> 都是指针，这个不同于 C/C++ 语言。</p></blockquote><p>在 Go 语言中，返回函数中局部变量的地址也是安全的。例如下面的代码，调用 <code>f</code> 函数时创建局部变量 <code>v</code>，在局部变量地址被返回之后依然有效，因为指针 <code>p</code> 依然引用这个变量。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">v</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>每次调用 <code>f</code> 函数都将返回不同的结果：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;false&quot;</span></span>
<span class="line"></span></code></pre></div><p>因为指针包含了一个变量的地址，因此如果将指针作为参数调用函数，那将可以在函数中通过该指针来更新变量的值。例如下面这个例子就是通过指针来更新变量的值，然后返回更新后的值，可用在一个表达式中：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">incr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 非常重要：只是增加p指向的变量的值，并不改变p指针！！！</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#82AAFF;">incr</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// side effect: v is now 2</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">incr</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;3&quot; (and v is 3)</span></span>
<span class="line"></span></code></pre></div><p>每次我们对一个变量取地址，或者复制指针，我们都是为原变量创建了新的别名。例如，<code>*p</code> 就是是 变量 <code>v</code> 的别名。指针特别有价值的地方在于我们可以不用名字而访问一个变量，但是这是一把双剑：要找到一个变量的所有访问者并不容易，我们必须知道变量全部的别名（这是 Go 语言的垃圾回收器所做的工作）。不仅仅是指针会创建别名，很多其他引用类型也会创建别名，例如 <code>slice</code>、<code>map</code> 和 <code>chan</code>，甚至结构体、数组和接口都会创建所引用变量的别名。</p><blockquote><p>所谓别名，是因为这些都是指向相同内存地址的标识符。</p></blockquote><h3 id="new函数声明" tabindex="-1">new函数声明 <a class="header-anchor" href="#new函数声明" aria-hidden="true">#</a></h3><p>另一个创建变量的方法是调用用内建的 <code>new</code> 函数。表达式 <code>new(T)</code> 将创建一个 <code>T</code> 类型的匿名变量，初始化为 <code>T</code> 类型的零值，然后返回变量地址，返回的指针类型为 <code>*T</code> 。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// p, *int 类型, 指向匿名的 int 变量</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;0&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 设置 int 匿名变量的值为 2</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;2&quot;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>用 <code>new</code> 创建变量和普通变量声明语句方式创建变量没有什么区别，除了不需要声明一个临时变量的名字外，我们还可以在表达式中使用 <code>new(T)</code>。换言之，<code>new</code> 函数类似是一种语法糖，而不是一个新的基础概念。</p></blockquote><p><strong>每次调用 <code>new</code> 函数都是返回一个新的变量的地址</strong>，因此下面两个地址是不同的：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">q </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> q</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;false&quot;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>当然也有特殊情况：<strong>如果两个类型都是空的</strong>，也就是说类型的大小是 0，例如 <code>struct{}</code> 和 <code>[0]int </code> , 有可能有相同的地址。这种要谨慎使用，因为 Go 语言的垃圾回收机制会有不同的行为。</p></blockquote><p><code>new</code> 函数使用相对比较少，因为对结构体来说，可以直接用字面量语法创建新变量的方法会更灵活。</p><p>由于 <code>new</code> 只是一个预定义的函数，它并不是一个关键字，因此我们可以将 <code>new</code> 名字重新定义为别的类型。</p><h3 id="变量的生命周期" tabindex="-1">变量的生命周期 <a class="header-anchor" href="#变量的生命周期" aria-hidden="true">#</a></h3><p><strong>变量的生命周期指的是在程序运行期间变量有效存在的时间间隔</strong>。</p><ul><li>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。</li><li>而相比之下，局部变量的生命周期则是动态的：从每次创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。函数的参数变量和返回值变量都是局部变量。它们在函数每次被调用的时候创建。</li></ul><p><strong>函数的右小括弧也可以另起一行缩进</strong>，同时为了防止编译器在行尾自动插入分号而导致的编译错误，可以在末尾的参数变量后面显式插入逗号：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> cycles</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pi</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    y </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">freq </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> phase</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    img</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetColorIndex</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      size</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">      blackIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 最后插入的逗号不会导致编译错误，这是Go编译器的一个特性</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 小括弧另起一行缩进，和大括弧的风格保存一致</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>上面代码在每次循环的开始会创建临时变量 <code>t</code>，然后在每次循环迭代中创建临时变量 <code>x</code> 和 <code>y</code>。</p></blockquote><p>Go 语言的自动圾收集器是如何知道一个变量是何时可以被回收的呢？基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。</p><p>因为<strong>一个变量的有效周期只取决于是否可达</strong>，因此<strong>一个循环迭代内部的局部变量的生命周期可能超出其局部作用域</strong>。同时，<strong>局部变量可能在函数返回之后依然存在</strong>。</p><p><strong>编译器会自动选择在栈上还是在堆上分配局部变量的存储空间</strong>，但可能令人惊讶的是，这个选择<strong>并不是由用 <code>var</code> 还是 <code>new</code> 声明变量的方式决定的</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> global </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    global </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">x</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">g</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    y </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><ul><li><code>f</code> 函数里的 <code>x</code> 变量<strong>必须在堆上分配</strong>，因为它在函数退出后依然可以通过包一级的 <code>global</code> 变量找到，虽然它是在函数内部定义的；用 Go 语言的术语说，这个 <code>x</code> 局部变量从函数 <code>f</code> 中逃逸了。</li><li>相反，当 <code>g</code> 函数返回时，变量 <code>*y </code>将是不可达的，也就是说可以马上被回收的。因此，<code>*y</code> 并没有从函数 <code>g</code> 中逃逸，编译器可以选择在栈上分配 <code>*y</code> 的存储空间（也可以选择在堆上分配，然后由 Go 语言的 GC 回收这个变量的内存空间），虽然这里用的是 <code>new</code> 方式。</li></ul></blockquote><p>其实在任何时候，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</p><p>Go 语言的自动垃圾收集器对编写正确的代码是一个巨大的帮助，但也并不是说你完全不用考虑内存了。你虽然不需要显式地分配和释放内存，但是要编写高效的程序你依然需要了解变量的生命周期。例如，如果将指向短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收（从而可能影响程序的性能）。</p><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-hidden="true">#</a></h2><p>常量使用关键字 <code>const</code> 定义，用于存储不会改变的数据。</p><p>存储在常量中的数据类型只可以是<strong>布尔型</strong>、<strong>数字型</strong>（整数型、浮点型和复数）和<strong>字符串型</strong>。</p><p>常量的定义格式：<code>const identifier [type] = value</code>，例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Pi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.14159</span></span>
<span class="line"></span></code></pre></div><p>在 Go 语言中，你可以省略类型说明符 <code>[type]</code>，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><p><strong>常量的值必须是能够在编译时就能够确定的</strong>；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。</p><ul><li>正确的做法：<code>const c1 = 2/3</code></li><li>错误的做法：<code>const c2 = getNumber()</code> // 引发构建错误: <code>getNumber() used as value</code></li></ul><blockquote><p><strong>因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：<code>len()</code>。</strong></p></blockquote><p>数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Ln2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.693147180559945309417232121458</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">                       </span><span style="color:#F78C6C;">176568075500134360255254120680009</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Log2E </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Ln2 </span><span style="color:#676E95;">// this is a precise reciprocal</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> Billion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1e9</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// float constant</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> hardEight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">97</span></span>
<span class="line"></span></code></pre></div><blockquote><p>根据上面的例子我们可以看到，反斜杠 <code>\\</code> 可以在常量表达式中作为多行的连接符使用。</p></blockquote><p><strong>一个常量的声明也可以包含一个类型和一个值，但是如果没有显式指明类型，那么将从右边的表达式推断类型</strong>。</p><p>如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，<strong>如果省略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的</strong>。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    b</span></span>
<span class="line"><span style="color:#A6ACCD;">    c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    d</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;1 1 2 2&quot;</span></span>
<span class="line"></span></code></pre></div><p>如果只是简单地复制右边的常量表达式，其实并没有太实用的价值。但是它可以带来其它的特性，那就是 <code>iota</code> 常量生成器语法。</p><h3 id="iota-常量生成器" tabindex="-1">iota 常量生成器 <a class="header-anchor" href="#iota-常量生成器" aria-hidden="true">#</a></h3><p><code>iota</code> 是特殊的常量，可以被编译器自动修改的常量，每当定义一个 <code>const</code>，<code>iota</code> 的初始值就置为<code>0</code>，每当定义一个常量，就会自动累加 <code>1</code>。在下一个 <code>const</code> 里再初次定义 <code>iota</code> 时会清零，看下面代码示例就懂了。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// iota=1</span></span>
<span class="line"><span style="color:#A6ACCD;">    c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 2</span></span>
<span class="line"><span style="color:#A6ACCD;">    d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//iota=3, 3 + 5 = 5</span></span>
<span class="line"><span style="color:#A6ACCD;">    e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// iota=4</span></span>
<span class="line"><span style="color:#A6ACCD;">    f </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// iota=5</span></span>
<span class="line"><span style="color:#A6ACCD;">    g </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 6</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    h </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// iota=0</span></span>
<span class="line"><span style="color:#A6ACCD;">    i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;">    j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// iota=2</span></span>
<span class="line"><span style="color:#A6ACCD;">    k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">iota</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 3</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>注意，即使，<code>const</code> 中第一个定义的常量没用 <code>iota</code>，<code>iota</code> 也会在计数。</strong></p><p><strong>简单地讲，每遇到一次 <code>const </code> 关键字，<code>iota </code> 就重置为 <code>0</code>。</strong></p><h2 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-hidden="true">#</a></h2><p>和其他语言一样，值放在等号右边，接收的变量放在等号左边</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 命名变量的赋值</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 通过指针间接赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 结构体字段赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> scale </span><span style="color:#676E95;">// 数组、slice或map的元素赋值</span></span>
<span class="line"></span></code></pre></div><p>也有二元运算符，如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*=</span><span style="color:#A6ACCD;"> scale</span></span>
<span class="line"></span></code></pre></div><p>特别地，Go要提一下一元运算符。数值变量也可以支持 <code>++</code> 递增和 <code>--</code> 递减语句（<strong>自增和自减是语句，而不是表达式，因此 <code> x = i++</code> 之类的表达式是错误的</strong>）：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 等价方式 v = v + 1；v 变成 2</span></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 等价方式 v = v - 1；v 变成 1</span></span>
<span class="line"></span></code></pre></div><h3 id="元组赋值" tabindex="-1">元组赋值 <a class="header-anchor" href="#元组赋值" aria-hidden="true">#</a></h3><p>元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。在赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值。这对于处理有些同时出现在元组赋值语句左右两边的变量很有帮助，例如我们可以这样交换两个变量的值：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>或者是计算两个整数值的的最大公约数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gcd</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>或者是计算斐波纳契数列（Fibonacci）的第 N 个数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>元组赋值也可以使一系列琐碎赋值更加紧凑，特别是在 for 循环的初始化部分：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span></code></pre></div><p>但如果表达式太复杂的话，应该尽量避免过度使用元组赋值；因为每个变量单独赋值语句的写法可读性会更好。有些表达式会产生多个值，比如调用一个有多个返回值的函数。当这样一个函数调用出现在元组赋值右边的表达式中时（<strong>右边不能再有其它表达式</strong>），左边变量的数目必须和右边一致。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">f, err = os.Open(&quot;foo.txt&quot;) // function call returns two values</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>和变量声明一样，我们可以用下划线空白标识符 <code>_</code> 来丢弃不需要的值：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> src</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 丢弃字节数</span></span>
<span class="line"><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ok </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.(</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;">// 只检测类型，忽略具体值</span></span>
<span class="line"></span></code></pre></div><h3 id="可赋值性" tabindex="-1">可赋值性 <a class="header-anchor" href="#可赋值性" aria-hidden="true">#</a></h3><p>赋值语句是显式的赋值形式，但是程序中还有很多地方会发生隐式的赋值行为：函数调用会隐式地将调用参数的值赋值给函数的参数变量，一个返回语句将隐式地将返回操作的值赋值给结果变量，一个复合类型的字面量也会产生赋值行为。</p><p>不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型。更直白地说，<strong>只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的</strong>。</p><blockquote><p><code>nil</code> 可以赋值给任何指针或引用类型的变量</p></blockquote><p>对于两个值是否可以用 <code>==</code> 或 <code>!=</code> 进行相等比较的能力也和可赋值能力有关系：<strong>对于任何类型的值的相等比较，第二个值必须是对第一个值类型对应的变量是可赋值的，反之依然</strong>。</p><h2 id="值类型和引用类型" tabindex="-1">值类型和引用类型 <a class="header-anchor" href="#值类型和引用类型" aria-hidden="true">#</a></h2><p>所有像 <code>int</code>、<code>float</code>、<code>bool </code> 和 <code>string </code> 这些<strong>基本类型</strong>都属于值类型，使用这些类型的变量直接指向存在内存中的值。另外，像<code>数组</code>和 <code>struct</code> 这些复合类型也是值类型。</p><p>当使用等号 <code>=</code> 将一个变量的值赋值给另一个变量时，如：<code>j = i</code>，实际上是在内存中将 <code>i</code> 的值进行了拷贝。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">	j </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 7 0xc00000a0c8</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 7 0xc00000a0e0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在 Go 语言中，<code>指针</code>属于引用类型，其它的引用类型还包括 <code>slices</code>，<code>maps</code> 和 <code>channel</code>。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。</p><p>一个引用类型的变量 <code>r1</code> 存储的是 <code>r1 </code> 的值所在的内存地址（数字），或内存地址中第一个字所在的位置：</p><p><img src="`+o+`" alt=""></p><p>同一个引用类型的指针指向的多个字可以是在连续的内存地址中（内存布局是连续的），这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。</p><p>当使用赋值语句 <code>r2 = r1</code> 时，只有引用（地址）被复制。</p><p>如果 <code>r1 </code> 的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个例子中，<code>r2 </code> 也会受到影响。</p><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-hidden="true">#</a></h2><h3 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">相加</td><td style="text-align:center;">/</td><td style="text-align:center;">相除</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">相减</td><td style="text-align:center;">%</td><td style="text-align:center;">求余</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">相乘</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">++</td><td style="text-align:center;">自增</td><td style="text-align:center;">--</td><td style="text-align:center;">自减</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>/</code> 两边都是整数则为整除，有一边是浮点数就是正常除法</li><li><code>%</code> 只针对整数运算</li><li><code>++</code> / <code>-- </code>不是表达式，不能赋值，它只是一行可执行的代码</li></ul></div><h3 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">检查两个值是否相等，如果相等返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td></tr><tr><td style="text-align:center;">||</td><td style="text-align:center;">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td></tr></tbody></table><blockquote><p>注意，Go 语言中逻辑运算是短路运算。</p></blockquote><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">p</th><th style="text-align:center;">q</th><th style="text-align:center;">p &amp; q</th><th style="text-align:center;">p | q</th><th style="text-align:center;">p ^ q</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>^</code> 可以是单目运算符，<code>^p</code> 表示按位取反</p><p>Go 语言中，负数是以补码形式存在的</p><p>特别地，有一种位清空运算符 <code>&amp;^</code>，作用如下：</p><ul><li><code>1 &amp;^ 1 = 0</code></li><li><code>1 &amp;^ 0 = 1</code></li><li><code>0 &amp;^ 1 = 0</code></li><li><code>0 &amp;^ 0 = 0</code></li></ul><p>特点是：<strong>如果右侧是 0，则左侧保持不变；如果右侧是 1，则左侧清零。功能和 <code>a&amp;(^b)</code> 相同。</strong></p><p>例如：<code>5 &amp;^ 3 = 4</code> 转成二进制看即 <code>101 &amp;^ 011 = 100</code></p></div><h3 id="复合赋值运算符" tabindex="-1">复合赋值运算符 <a class="header-anchor" href="#复合赋值运算符" aria-hidden="true">#</a></h3><p>如 <code>+=</code>、<code>-=</code> 等等</p><h3 id="指针和地址运算符" tabindex="-1">指针和地址运算符 <a class="header-anchor" href="#指针和地址运算符" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">实例</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">返回变量存储地址</td><td style="text-align:center;"><code>&amp;a</code> 将给出变量的实际地址</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">取出指针指向的值</td><td style="text-align:center;"><code>*a</code> 返回指针指向的值</td></tr></tbody></table><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	a </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">	b </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 0xc0000ca018</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-hidden="true">#</a></h2><p>一个声明语句将程序中的实体和一个名字关联，比如一个函数或一个变量。声明语句的作用域是指源代码中可以有效使用这个名字的范围。</p><p>不要将作用域和生命周期混为一谈。声明语句的作用域对应的是一个源代码的文本区域；它是一个<strong>编译时的属性</strong>。一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个<strong>运行时的概念</strong>。</p><p>语法块是由花括弧所包含的一系列语句，就像函数体或循环体花括弧对应的语法块那样。<strong>语法块内部声明的名字是无法被外部语法块访问的</strong>。语法决定了内部声明的名字的作用域范围。</p><p><strong>声明语句对应的词法域决定了作用域范围的大小</strong>。对于内置的类型、函数和常量，比如 <code>int</code>、<code>len</code> 和 <code>true</code> 等是在全局作用域的，因此可以在整个程序中直接使用。<strong>任何在函数外部（也就是包级语法域）声明的名字可以在同一个包的任何源文件中访问的</strong>。对于导入的包，例如 <code>tempconv</code> 导入的 <code>fmt</code> 包，则是<strong>对应源文件级的作用域</strong>，因此只能在当前的文件中访问导入的 <code>fmt</code> 包，当前包的其它源文件无法访问在当前源文件导入的包。还有许多声明语句，比如 <code>tempconv.CToF</code> 函数中的变量 <code>c</code>，则是局部作用域的，它只能在函数内部（甚至只能是局部的某些部分）访问。</p><p>控制流标号，就是 <code>break</code>、<code>continue</code> 或 <code>goto</code> 语句后面跟着的那种标号，则是函数级的作用域。</p><p>一个程序可能包含多个同名的声明，只要它们在不同的词法域就没有关系。例如，你可以声明一个局部变量，和包级的变量同名。或者你可以将一个函数参数的名字声明为 <code>new</code>，虽然内置的 <code>new</code> 是全局作用域的。但是物极必反，如果滥用不同词法域可重名的特性的话，可能导致程序很难阅读。</p><blockquote><p>内部声明屏蔽了外部同名的声明，让外部的声明的名字无法被访问</p></blockquote><p>并不是所有的词法域都显式地对应到由花括弧包含的语句；还有一些隐含的规则。<strong><code>for</code> 语句创建了两个词法域</strong>：花括号包含的是显式的部分是 <code>for</code> 的循环体部分词法域，另外一个隐式的部分则是循环的初始化部分，比如用于迭代变量 <code>i</code> 的初始化。<strong>隐式的词法域部分的作用域还包含条件测试部分和循环后的迭代部分（ <code>i++ </code>），当然也包含循环体词法域</strong>。</p><p>下面的例子同样有三个不同的 <code>x</code> 变量，每个声明在不同的词法域，一个在函数体词法域，一个在 <code>for</code> 隐式的初始化词法域，一个在 <code>for</code> 循环体词法域；只有两个块是显式创建的：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">range</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;HELLO&quot; (one letter per iteration)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>特别的，下面这种代码的 bug 检测器可能失效</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> cwd </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    cwd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Getwd</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// NOTE: wrong!</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">os.Getwd failed: %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Working directory = %s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cwd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p><code>init()</code> 函数中的 <code>cwd</code> 是简短声明了一个新变量，和外面的包级变量 <code>cwd</code> 不是一个东西，偏偏函数内部还使用了内部的 <code>cwd</code>，这种同名的变量会造成误解，其实外面的 <code>cwd</code> 声明后并未使用。</p></blockquote><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-hidden="true">#</a></h2><ul><li><p>单行注释</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 单行注释</span></span>
<span class="line"></span></code></pre></div></li><li><p>多行注释</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">/*</span></span>
<span class="line"><span style="color:#676E95;"> * 多行注释</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="包注释" tabindex="-1">包注释 <a class="header-anchor" href="#包注释" aria-hidden="true">#</a></h3><ul><li>每个包都应该有一个包注释，一个位于 package 子句之前行注释</li><li>包注释应该包含下面基本信息</li></ul><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// @Title  文件名称</span></span>
<span class="line"><span style="color:#676E95;">// @Description  文件描述</span></span>
<span class="line"><span style="color:#676E95;">// @Author  作者名称 (时间 格式是2019/3/26  19:53)</span></span>
<span class="line"><span style="color:#676E95;">// @Update  修改者名称 (时间 格式是2019/3/26  19:53)</span></span>
<span class="line"></span></code></pre></div><h3 id="结构-接口-注释" tabindex="-1">结构（接口）注释 <a class="header-anchor" href="#结构-接口-注释" aria-hidden="true">#</a></h3><p>每个自定义的结构体或者接口都应该有注释说明，该注释对结构进行简要介绍，放在结构体定义的前一行，格式为： <code>结构体名， 结构体说明</code>。同时结构体内的每个成员变量都要有说明，该说明放在成员变量的后面（注意对齐），实例如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// User ， 用户对象，定义了用户的基础信息</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Username </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 用户名</span></span>
<span class="line"><span style="color:#A6ACCD;">    Email </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 邮箱</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="函数-方法-注释" tabindex="-1">函数（方法）注释 <a class="header-anchor" href="#函数-方法-注释" aria-hidden="true">#</a></h3><ul><li>每个函数，或者方法（结构体或者接口下的函数称为方法）都应该有注释说明</li><li>函数的注释应该包括三个方面</li><li>注释在函数（方法）定义语句上面</li></ul><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// @title    函数名称</span></span>
<span class="line"><span style="color:#676E95;">// @description   函数的详细描述</span></span>
<span class="line"><span style="color:#676E95;">// @auth      作者             时间（2019/6/18   10:57 ）</span></span>
<span class="line"><span style="color:#676E95;">// @param     输入参数名        参数类型         &quot;解释&quot;</span></span>
<span class="line"><span style="color:#676E95;">// @return    返回参数名        参数类型         &quot;解释&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="代码逻辑注释" tabindex="-1">代码逻辑注释 <a class="header-anchor" href="#代码逻辑注释" aria-hidden="true">#</a></h3><p>对于一些关键位置的代码逻辑，或者局部较为复杂的逻辑，需要有相应的逻辑说明，方便其他开发者阅读该段代码，实例如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span>
<span class="line"><span style="color:#A6ACCD;">xxxxx</span></span>
<span class="line"><span style="color:#A6ACCD;">xxxxxxx</span></span>
<span class="line"><span style="color:#A6ACCD;">xxxxxxx</span></span>
<span class="line"></span></code></pre></div><h3 id="注释风格" tabindex="-1">注释风格 <a class="header-anchor" href="#注释风格" aria-hidden="true">#</a></h3><p>统一使用中文注释，对于中英文字符之间严格使用空格分隔， 这个不仅仅是中文和英文之间，英文和中文标点之间也都要使用空格分隔，例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span>
<span class="line"></span></code></pre></div>`,264),t=[e];function c(r,D,y,C,F,A){return n(),a("div",null,t)}const g=s(p,[["render",c]]);export{d as __pageData,g as default};
