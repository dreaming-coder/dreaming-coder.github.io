import{_ as s,o as n,c as a,a as l}from"./app.f804f2e6.js";const i=JSON.parse('{"title":"GoLang - 结构体","description":"","frontmatter":{},"headers":[{"level":2,"title":"结构体类型","slug":"结构体类型","link":"#结构体类型","children":[]},{"level":2,"title":"结构体特性","slug":"结构体特性","link":"#结构体特性","children":[{"level":3,"title":"内存布局","slug":"内存布局","link":"#内存布局","children":[]},{"level":3,"title":"递归结构体","slug":"递归结构体","link":"#递归结构体","children":[]},{"level":3,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":3,"title":"带标签的结构体","slug":"带标签的结构体","link":"#带标签的结构体","children":[]},{"level":3,"title":"匿名成员","slug":"匿名成员","link":"#匿名成员","children":[]},{"level":3,"title":"嵌入与聚合","slug":"嵌入与聚合","link":"#嵌入与聚合","children":[]}]},{"level":2,"title":"工厂方法创建结构体实例","slug":"工厂方法创建结构体实例","link":"#工厂方法创建结构体实例","children":[]}],"relativePath":"md/golang/go-struct.md","lastUpdated":1674885557000}'),p={name:"md/golang/go-struct.md"},o=l(`<h1 id="golang-结构体" tabindex="-1">GoLang - 结构体 <a class="header-anchor" href="#golang-结构体" aria-hidden="true">#</a></h1><p>结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。用结构体的经典案例是处理公司的员工信息，每个员工信息包含一个唯一的员工编号、员工的名字、家庭住址、出生日期、工作岗位、薪资、上级领导等等。所有的这些信息都需要绑定到一个实体中，可以作为一个整体单元被复制，作为函数的参数或返回值，或者是被存储到数组中，等等。</p><p>下面两个语句声明了一个叫 <code>Employee</code> 的命名的结构体类型，并且声明了一个 <code>Employee</code> 类型的变量 <code>dilbert</code>：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Employee</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    ID        </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    Name      </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    Address   </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    DoB       time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Time</span></span>
<span class="line"><span style="color:#A6ACCD;">    Position  </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    Salary    </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    ManagerID </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> dilbert Employee</span></span>
<span class="line"></span></code></pre></div><p><code>dilbert</code> 结构体变量的成员可以通过<strong>点</strong>操作符访问，比如 <code>dilbert.Name</code> 和 <code>dilbert.DoB</code>。因为 <code>dilbert</code> 是一个变量，它所有的成员也同样是变量，我们可以直接对每个成员赋值：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">dilbert</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Salary </span><span style="color:#89DDFF;">-=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// demoted, for writing too few lines of code</span></span>
<span class="line"></span></code></pre></div><p>或者是对成员取地址，然后通过指针访问：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">position </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dilbert</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Position</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">position </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Senior </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">position </span><span style="color:#676E95;">// promoted, for outsourcing to Elbonia</span></span>
<span class="line"></span></code></pre></div><p>点操作符也可以和指向结构体的指针一起工作：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> employeeOfTheMonth </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Employee </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dilbert</span></span>
<span class="line"><span style="color:#A6ACCD;">employeeOfTheMonth</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Position </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> (proactive team player)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>相当于下面语句</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">employeeOfTheMonth</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Position </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> (proactive team player)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>下面的 <code>EmployeeByID</code> 函数将根据给定的员工 <code>ID</code> 返回对应的员工信息结构体的指针。我们可以使用点操作符来访问它里面的成员：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EmployeeByID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">id </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Employee </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">EmployeeByID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dilbert</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ManagerID</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Position</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;Pointy-haired boss&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> dilbert</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ID</span></span>
<span class="line"><span style="color:#82AAFF;">EmployeeByID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// fired for... no real reason</span></span>
<span class="line"></span></code></pre></div><p>后面的语句通过 <code>EmployeeByID</code> 返回的结构体指针更新了 <code>Employee</code> 结构体的成员。如果将 <code>EmployeeByID</code> 函数的返回值从 <code>*Employee</code> 指针类型改为 <code>Employee</code> 值类型，那么更新语句将不能编译通过。</p><blockquote><p>因为在赋值语句的左边并不确定是一个变量（调用函数返回的是值，并不是一个可取地址的变量）。</p></blockquote><h2 id="结构体类型" tabindex="-1">结构体类型 <a class="header-anchor" href="#结构体类型" aria-hidden="true">#</a></h2><p>结构体是由一系列称为字段（fields）的命名元素组成，每个元素都有一个名称和一个类型。 字段名称可以显式指定或隐式指定，没有显式字段名称的字段称为匿名（内嵌）字段。<strong>在结构体中，非空字段名称必须是唯一的</strong>。</p><p>结构体定义的一般方式如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">identifier</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    field1 type1</span></span>
<span class="line"><span style="color:#A6ACCD;">    field2 type2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>结构体里的字段一般都有名字，像 <code>field1</code>、<code>field2 </code> 等，如果字段在代码中从来也不会被用到，那么可以命名它为 <code>_</code>。</p><p>空结构体如下所示：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>具有 6 个字段的结构体：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    u </span><span style="color:#C792EA;">float32</span></span>
<span class="line"><span style="color:#A6ACCD;">    _ </span><span style="color:#C792EA;">float32</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 填充</span></span>
<span class="line"><span style="color:#A6ACCD;">    A </span><span style="color:#89DDFF;">*[]</span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    F </span><span style="color:#89DDFF;">func()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>对于匿名字段，必须将匿名字段指定为类型名称 <code>T</code> 或指向非接口类型名称 <code>*T</code> 的指针，并且 <code>T</code> 本身可能不是指针类型</strong>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">innerS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    in1 </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    in2 </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">outerS</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    c </span><span style="color:#C792EA;">float32</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// anonymous field</span></span>
<span class="line"><span style="color:#A6ACCD;">    innerS </span><span style="color:#676E95;">//anonymous field</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>调用方式：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">outer </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">outerS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">outer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span></span>
<span class="line"><span style="color:#A6ACCD;">outer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7.5</span></span>
<span class="line"><span style="color:#A6ACCD;">outer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">int </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span></span>
<span class="line"><span style="color:#A6ACCD;">outer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">in1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// outer.innerS.in1这样用也行，效果一样</span></span>
<span class="line"><span style="color:#A6ACCD;">outer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">in2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span></code></pre></div><p>使用 <code>new</code> 函数给一个新的结构体变量分配内存，它返回指向已分配内存的指针：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">S</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> a </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> b </span><span style="color:#C792EA;">float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><blockquote><p><code>new(S)</code> 为 <code>S</code> 类型的变量分配内存，并初始化 <code>a = 0，b = 0.0</code>，返回包含该位置地址的 <code>*S</code> 指针类型的值。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>我们一般的惯用方法是：<code>t := new(T)</code>，变量 <code>t</code> 是一个指向 <code>T</code> 的指针，此时结构体字段的值是它们所属类型的零值。</p></li><li><p>也可以这样写：<code>var t T</code> ，也会给 <code>t</code> 分配内存，并零值化内存，但是这个时候 <code>t</code> 是类型 <code>T</code>。</p></li><li><p>在这两种方式中，<code>t</code> 通常被称做类型 <code>T</code> 的一个实例（instance）或对象（object）。</p></li></ul></div><p>使用点号符 <code>.</code> 可以获取结构体字段的值 <code>structname.fieldname</code>。<strong>无论变量是一个结构体类型还是一个结构体类型指针，都使用同样的表示法来引用结构体的字段</strong>。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myStruct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span><span style="color:#A6ACCD;"> i </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> v myStruct                  </span><span style="color:#676E95;">// v是结构体类型变量</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">myStruct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">myStruct</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// p是指向一个结构体类型变量的指针</span></span>
<span class="line"><span style="color:#A6ACCD;">	v</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">	p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// {1}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &amp;{2}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>结构体变量有下面几种初始化方式，前面一种按照字段顺序，后面两种则对应字段名来初始化赋值：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Interval</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    start  </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    end   </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">intr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Interval</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">// (A)</span></span>
<span class="line"><span style="color:#A6ACCD;">intr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Interval</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// (B)</span></span>
<span class="line"><span style="color:#A6ACCD;">intr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Interval</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;">// (C)</span></span>
<span class="line"></span></code></pre></div><blockquote><p>在（A）中，值必须以字段在结构体定义时的顺序给出，（B）显示了另一种方式，字段名加一个冒号放在值的前面，这种情况下值的顺序不必一致，并且某些字段还可以被忽略掉，就像（C）中那样。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>结构体类型和字段的命名遵循可见性规则，一个导出的结构体类型中有些字段是导出的，也即首字母大写字段会导出；另一些不可见，也即首字母小写为未导出，对外不可见</strong>。</p></div><h2 id="结构体特性" tabindex="-1">结构体特性 <a class="header-anchor" href="#结构体特性" aria-hidden="true">#</a></h2><h3 id="内存布局" tabindex="-1">内存布局 <a class="header-anchor" href="#内存布局" aria-hidden="true">#</a></h3><p>Go 语言中，结构体和它所包含的数据在内存中是以连续块的形式存在的，即使结构体中嵌套有其他的结构体，这在性能上带来了很大的优势。</p><h3 id="递归结构体" tabindex="-1">递归结构体 <a class="header-anchor" href="#递归结构体" aria-hidden="true">#</a></h3><p>递归结构体类型可以通过引用自身指针来定义。这在定义链表或二叉树的节点时特别有用，此时节点包含指向临近节点的链接。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    next</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> prev </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Element</span></span>
<span class="line"><span style="color:#A6ACCD;">    Value </span><span style="color:#89DDFF;">interface{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 这里表示任意类型的值</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-hidden="true">#</a></h3><p>通过参考应用可见性规则，如果结构体名不能导出，可使用 <code>new</code> 函数使用工厂方法的方法达到同样的目的。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bitmap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Size </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    data </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewBitmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">size </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">bitmap </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    div</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">%</span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> mod </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        div</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">bitmap</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> div</span><span style="color:#89DDFF;">)}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在包外，只有通过 <code>NewBitmap</code> 函数才可以初始 <code>bitmap</code> 结构体。同理，在 <code>bitmap</code> 结构体中，由于其字段 <code>data</code> 是小写字母开头即并未导出，<code>bitmap</code> 结构体的变量不能直接通过选择器读取 <code>data</code> 字段的数据。</p><h3 id="带标签的结构体" tabindex="-1">带标签的结构体 <a class="header-anchor" href="#带标签的结构体" aria-hidden="true">#</a></h3><p>结构体中的字段除了有名字和类型外，还可以有一个可选的标签（tag）。它是一个附属于字段的字符串，可以是文档或其他的重要标记。标签的内容不可以在一般的编程中使用，只有 <code>reflect </code>包能获取它。</p><p><code>reflect</code> 包可以在运行时反射得到<code>类型</code>、<code>属性</code>和<code>方法</code>。如变量是结构体类型，可以通过 <code>Field()</code> 方法来索引结构体的字段，然后就可以得到 <code>Tag</code> 属性。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">reflect</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">学生名字</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 结构体标签</span></span>
<span class="line"><span style="color:#A6ACCD;">    Age </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">学生年龄</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;">// 结构体标签</span></span>
<span class="line"><span style="color:#A6ACCD;">    Room </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">json:&quot;Roomid&quot;</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 结构体标签</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    st </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Student</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Titan</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">102</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TypeOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Field</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Tag</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TypeOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Field</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Tag</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TypeOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">st</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Field</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Tag</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">学生名字</span></span>
<span class="line"><span style="color:#A6ACCD;">学生年龄</span></span>
<span class="line"><span style="color:#A6ACCD;">json:&quot;Roomid&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="匿名成员" tabindex="-1">匿名成员 <a class="header-anchor" href="#匿名成员" aria-hidden="true">#</a></h3><p>Go 语言结构体中可以包含一个或多个匿名（内嵌）字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型就是字段的名字（这一特征决定了在一个结构体中，每种数据类型只能有一个匿名字段）。</p><blockquote><p><strong>匿名（内嵌）字段本身也可以是一个结构体类型，即结构体可以包含内嵌结构体</strong>。</p></blockquote><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 含内嵌结构体Human</span></span>
<span class="line"><span style="color:#A6ACCD;">    Human </span><span style="color:#676E95;">// 匿名（内嵌）字段</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 匿名（内嵌）字段</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>Go 语言结构体中这种含匿名（内嵌）字段和内嵌结构体的结构，可近似地理解为面向对象语言中的继承概念。</p></li><li><p>Go 语言中的继承是通过内嵌或者说组合来实现的，所以可以说，在 Go 语言中，相比较于继承，组合更受青睐。</p></li></ul></div><h3 id="嵌入与聚合" tabindex="-1">嵌入与聚合 <a class="header-anchor" href="#嵌入与聚合" aria-hidden="true">#</a></h3><p><strong>结构体中包含匿名（内嵌）字段叫嵌入或者内嵌；而如果结构体中字段包含了类型名，还有字段名，则是聚合</strong>。聚合的在 Java 和 C++ 都是常见的方式，而内嵌则是 Go 的特有方式。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;">// 内嵌</span></span>
<span class="line"><span style="color:#A6ACCD;">    Human</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;">// 内嵌， 这种内嵌与上面内嵌有差异</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Human</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;">// 聚合</span></span>
<span class="line"><span style="color:#A6ACCD;">    human Human</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>差异在于内嵌的属性能否直接使用：</p><blockquote><p>其实就是指针写基本要求，没有给初值怎么好使用呢？</p></blockquote><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	basename </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Derive1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	Base</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Derive2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Base</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	d1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Derive1</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">derive1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">//d2 := Derive2{Base{&quot;derive2&quot;}} // 编译错误</span></span>
<span class="line"><span style="color:#A6ACCD;">	d2 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Derive2</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// {{derive1}}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// {0xc000088230}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	d1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modified derive1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	d2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modified derive2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// {{modified derive1}}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// {0xc000088230}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">d2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// modified derive1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	dp1 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Derive1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	dp2 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Derive2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dp1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &amp;{{}}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dp2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &amp;{{}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	dp1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">derive1 pointer</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">//dp2.basename = &quot;derive2 pointer&quot; // 编译错误，未初始化 *Base</span></span>
<span class="line"><span style="color:#A6ACCD;">	dp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Base </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	dp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">derive2 pointer</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dp1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// &amp;{{derive1 pointer}}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dp2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// &amp;{0xc0000502d0}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dp2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basename</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// derive2 pointer</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="工厂方法创建结构体实例" tabindex="-1">工厂方法创建结构体实例 <a class="header-anchor" href="#工厂方法创建结构体实例" aria-hidden="true">#</a></h2><p>Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂”方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 <code>new</code> 或 <code>New</code> 开头。假设定义了如下的 <code>File</code> 结构体类型：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    fd </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 文件描述符</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 文件名</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewFile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">File</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后这样调用它：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">f </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewFile</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./test.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>在 Go 语言中常常像上面这样在工厂方法里使用初始化来简便的实现构造函数。</p><p>如果 <code>File</code> 是一个结构体类型，那么表达式 <code>new(File)</code> 和 <code>&amp;File{}</code> 是等价的</p><p><strong>如何强制使用工厂方法:</strong></p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">matrix</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewMatrix</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">matrix </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    m </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matrix</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 初始化 m</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> m</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在其他包里使用工厂方法：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">matrix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">wrong </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matrix</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">matrix</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 编译失败（matrix 是私有的）</span></span>
<span class="line"><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> matrix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewMatrix</span><span style="color:#89DDFF;">(...)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 实例化 matrix 的唯一方式</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这里利用了可见性规则</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>这里再强调一句，<code>make()</code> 用于引用变量分配空间，<code>new()</code> 适用于值对象创建并初始化；结构体是值对象！</strong></p></div>`,81),e=[o];function c(t,r,D,y,C,F){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{i as __pageData,d as default};
