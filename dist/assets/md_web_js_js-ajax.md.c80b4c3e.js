import{_ as n,o as l,c as o,i as e,a as s,j as p}from"./app.92d8dc75.js";const t="/imgs/web/js/java-ajax-1.webp",c="/imgs/web/js/java-ajax-2.png",x=JSON.parse('{"title":"JavaScript - Ajax","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 Ajax","slug":"什么是-ajax","link":"#什么是-ajax","children":[]},{"level":2,"title":"Ajax 工作原理","slug":"ajax-工作原理","link":"#ajax-工作原理","children":[]},{"level":2,"title":"XMLHttpRequest 对象","slug":"xmlhttprequest-对象","link":"#xmlhttprequest-对象","children":[]},{"level":2,"title":"Ajax 事件","slug":"ajax-事件","link":"#ajax-事件","children":[]},{"level":2,"title":"获取和设置标头","slug":"获取和设置标头","link":"#获取和设置标头","children":[]},{"level":2,"title":"Ajax 跨域","slug":"ajax-跨域","link":"#ajax-跨域","children":[]},{"level":2,"title":"使用 FormData 发送表单数据","slug":"使用-formdata-发送表单数据","link":"#使用-formdata-发送表单数据","children":[{"level":3,"title":"发送 JSON 数据","slug":"发送-json-数据","link":"#发送-json-数据","children":[]},{"level":3,"title":"发送文件","slug":"发送文件","link":"#发送文件","children":[]}]}],"relativePath":"md/web/js/js-ajax.md","lastUpdated":1674277092000}'),r={name:"md/web/js/js-ajax.md"},D=s('<h1 id="javascript-ajax" tabindex="-1">JavaScript - Ajax <a class="header-anchor" href="#javascript-ajax" aria-hidden="true">#</a></h1><h2 id="什么是-ajax" tabindex="-1">什么是 Ajax <a class="header-anchor" href="#什么是-ajax" aria-hidden="true">#</a></h2><p>Ajax = <strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML.</p><p>Ajax 并非编程语言。</p><p>Ajax 仅仅组合了：</p><ul><li>浏览器内建的 <code>XMLHttpRequest</code> 对象（从 web 服务器请求数据）</li><li>JavaScript 和 HTML DOM（显示或使用数据）</li></ul><p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p><p>Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p><h2 id="ajax-工作原理" tabindex="-1">Ajax 工作原理 <a class="header-anchor" href="#ajax-工作原理" aria-hidden="true">#</a></h2><p><img src="'+t+`" alt=""></p><ol><li>网页中发生一个事件（页面加载、按钮点击）</li><li>由 JavaScript 创建 <code>XMLHttpRequest</code> 对象</li><li><code>XMLHttpRequest</code> 对象向 web 服务器发送请求</li><li>服务器处理该请求</li><li>服务器将响应发送回网页</li><li>由 JavaScript 读取响应</li><li>由 JavaScript 执行正确的动作（比如更新页面）</li></ol><h2 id="xmlhttprequest-对象" tabindex="-1">XMLHttpRequest 对象 <a class="header-anchor" href="#xmlhttprequest-对象" aria-hidden="true">#</a></h2><p>创建 <code>XMLHttpRequest</code> 对象的语法是：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>老版本的 Internet Explorer（IE 5 和 IE 6）使用 <code>ActiveX</code> 对象：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ActiveXObject</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Microsoft.XMLHTTP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>下面从一个例子来看：</p>`,17),y=s(`<details class="details custom-block"><summary>参考代码</summary><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-uT_Ty" id="tab-oJLYCAQ" checked="checked"><label for="tab-oJLYCAQ">html</label><input type="radio" name="group-uT_Ty" id="tab-43Wzzv1"><label for="tab-43Wzzv1">css</label><input type="radio" name="group-uT_Ty" id="tab-CDBB7TU"><label for="tab-CDBB7TU">javascript</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xhr-div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">xhr-div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5px</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">320px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">1eff65</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> larger</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#xhr-div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/poem.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 相对当前地址</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></div></div></details><h2 id="ajax-事件" tabindex="-1">Ajax 事件 <a class="header-anchor" href="#ajax-事件" aria-hidden="true">#</a></h2><p>建立和探索一个简单的示例之后，现在可以开始深人了解 <code>XMLHttpRequest</code> 对象支持的功能，以及如何在请求中使用它们了。</p><p><img src="`+c+`" alt=""></p><p>这些事件大多数会在请求的某一个特定时点上触发。<code>readystatechange</code> (之前介绍过)和 <code>progress</code> 这两个事件是例外，它们可以多次触发以提供进度更新。</p><p>调度这些事件时，浏览器会对 <code>readystatechange</code> 事件使用常规的 <code>Event</code> 对象，对其他事件则使用<code>ProgressEvent</code> 对象。<code>ProgressEvent</code> 对象定义了 <code>Event</code> 对象的所有成员，并增加了如下成员。</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th><th style="text-align:center;">事件类型</th></tr></thead><tbody><tr><td style="text-align:center;">lengthComputable</td><td style="text-align:center;">如果能够计算数据流的总长度则返回true</td><td style="text-align:center;">布尔值</td></tr><tr><td style="text-align:center;">loaded</td><td style="text-align:center;">返回当前已载入的数据量</td><td style="text-align:center;">数值</td></tr><tr><td style="text-align:center;">total</td><td style="text-align:center;">返回可用的数据总量</td><td style="text-align:center;">数值</td></tr></tbody></table><h2 id="获取和设置标头" tabindex="-1">获取和设置标头 <a class="header-anchor" href="#获取和设置标头" aria-hidden="true">#</a></h2><p><code>XMLHttpRequest</code> 对象让你可以设置发送给服务器的请求标头( Header )和读取服务器响应里的标头。</p><ul><li><p><code>setRequestHeader(&lt;header&gt;,&lt;value&gt;)</code></p><p>用指定值设置标头，返回 <code>void</code></p></li><li><p><code>getResponseHeader(&lt;header&gt;)</code></p><p>获取指定的标头值，返回字符串</p></li><li><p><code>getAllResponseHeaders()</code></p><p>以单个字符串形式获取所有的标头</p></li></ul><p>【例】</p><ul><li><strong>想利用 RestFul 风格接口增删改查时</strong></li></ul><p>一般防火墙只接受 <code>GET</code> 或者 <code>POST</code> 请求，像 <code>PUT</code>、<code>DELETE</code> 等请求无法直接传递，可以利用标头 <code>X-HTTP-Method-Override</code> 设置成 <code>DELETE</code>、<code>PUT</code> 等。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>设置标头方法必须在 <code>open()</code> 方法之后，否则会报错。</p></div><ul><li><strong>禁用内容缓存</strong></li></ul><p>一些浏览器会缓存通过 Ajax 请求所获得的内容，在浏览会话期间不会再请求它。可以设置标头 <code>Cache-Control</code> 为 <code>no-cache</code> 来禁用缓存。</p><ul><li><strong>读取响应标头</strong></li></ul><p>可以通过 <code>getResponseHeader</code> 和 <code>getAllResponseHeaders</code> 方法来读取服务器响应某个 Ajax 请求时发送的 HTTP 标头。在大多数情况下，你不需要关心标头里有什么，因为它们是浏览器和服务器之间交互事务的组成部分。</p><h2 id="ajax-跨域" tabindex="-1">Ajax 跨域 <a class="header-anchor" href="#ajax-跨域" aria-hidden="true">#</a></h2><p>默认情况下，浏览器限制脚本只能在它们所属文档的来源内生成 Ajax 请求。你应该还记得，来源由 URL 中的协议、主机名和端口号组成。这就意味着当我 <code>htp://titan</code> 载入一个文档后，文档内含的脚本通常无法生成对 <code>http:/itan:8080</code> 的请求，因为第二个 URL 的端口号是不同的，所以处于文档来源之外。从一个来源到另一个来源的 Ajax 请求被称为跨域请求( cross-origin request )。</p><p>这个策略的问题在于它一刀切地禁止了跨源请求。这就导致人们使用一些非常丑陋的手段来诱使浏览器生成违反这一策略的请求。幸好，跨源资源共享( Cross-Origin Resource Sharing, CORS )规范提供了一种合法的方式来生成跨源请求。</p><p>我们可以设置 <code>Access-Control-Allow-Origin</code> 标头来指定某个来源应当被允许对此文档生成跨源请求，如果标头里指定的来源与当前文档的来源匹配，浏览器就会加载和处理该响应所包含的数据，也可以设为 <code>*</code>，表示允许任意来源的跨域请求。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>这是在服务端设置响应标头</strong>！</p></div><p>当我们使用 <code>PUT</code> 和 <code>DELETE</code> 这种复杂请求时，浏览器会先发送 <code>option</code>（预检）请求，与简单请求不同的是，option 请求多了 2 个字段：</p><ul><li><code>Access-Control-Request-Method</code>：该次请求的请求方式</li><li><code>Access-Control-Request-Headers</code>：该次请求的自定义请求头字段</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>这部分先做个记录，知道有这么个玩意儿能解决跨域问题，需要时再深入补充。</strong></p></div><h2 id="使用-formdata-发送表单数据" tabindex="-1">使用 FormData 发送表单数据 <a class="header-anchor" href="#使用-formdata-发送表单数据" aria-hidden="true">#</a></h2><p>提交表单时，如果按照原始方式用键值对拼接起来有些复杂，目前主流浏览器都支持将表单数据封装到 FormData 数据类型中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">form</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> formData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FormData</span><span style="color:#A6ACCD;">(form)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// 假定已经创建 XMLHttpRequest 对象</span></span>
<span class="line"><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(formData)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>其他需要注意的地方是我不再设置 <code>Content-Type</code> 标头的值了。如果使用 <code>FormData</code> 对象，数据总是会被编码为 <code>multipart/form-data</code>。</p></div><p>另外，<code>FormData</code> 对象定义了一个方法，它允许你给要发送到服务器的数据添加自定义的键值对。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">formData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="发送-json-数据" tabindex="-1">发送 JSON 数据 <a class="header-anchor" href="#发送-json-数据" aria-hidden="true">#</a></h3><p>JavaScript 原生支持 JSON 格式，因此使用比较简单。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 设置格式</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(formData))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 发送JSON格式数据，这里将FormData转成JSON格式</span></span>
<span class="line"></span></code></pre></div><h3 id="发送文件" tabindex="-1">发送文件 <a class="header-anchor" href="#发送文件" aria-hidden="true">#</a></h3><p>可以使用 <code>FormData</code> 对象和 <code>type</code> 属性为 <code>file</code> 的 <code>input</code> 元素向服务器发送文件。当表单提交时，<code>FormData</code> 对象会自动确保用户选择的文件内容与其他的表单值一同上传。</p>`,37);function i(d,F,C,A,u,h){const a=p("ajax");return l(),o("div",null,[D,e(a),y])}const v=n(r,[["render",i]]);export{x as __pageData,v as default};
