import{_ as e,o as r,c as t,a as n}from"./app.3caa01d5.js";const a="/imgs/foundation/network/dns-1.png",o="/imgs/foundation/network/dns-2.png",s="/imgs/foundation/network/dns-3.png",b=JSON.parse('{"title":"域名系统（DNS）","description":"","frontmatter":{},"headers":[{"level":2,"title":"层次域名空间","slug":"层次域名空间","link":"#层次域名空间","children":[]},{"level":2,"title":"域名服务器","slug":"域名服务器","link":"#域名服务器","children":[]},{"level":2,"title":"域名解析过程","slug":"域名解析过程","link":"#域名解析过程","children":[{"level":3,"title":"递归查询","slug":"递归查询","link":"#递归查询","children":[]},{"level":3,"title":"迭代查询","slug":"迭代查询","link":"#迭代查询","children":[]}]}],"relativePath":"md/foundation/network/dns.md","lastUpdated":null}'),i={name:"md/foundation/network/dns.md"},d=n('<h1 id="域名系统-dns" tabindex="-1">域名系统（DNS） <a class="header-anchor" href="#域名系统-dns" aria-hidden="true">#</a></h1><p>域名系统是因特网使用的命名系统，用来把便于人们记忆的具有特定含义的主机名转换为便于及其处理的 IP 地址。相对于 IP 地址，人们更喜欢使用具有特定含义的字符串来标识因特网上的计算机。值得注意的是，DNS 系统采用 C/S 架构，其协议运行在 UDP 之上，使用 53 号端口。</p><p>从概念上可将 DNS 分为三部分：层次域名空间、域名服务器和解析器</p><h2 id="层次域名空间" tabindex="-1">层次域名空间 <a class="header-anchor" href="#层次域名空间" aria-hidden="true">#</a></h2><p><img src="'+a+'" alt=""></p><h2 id="域名服务器" tabindex="-1">域名服务器 <a class="header-anchor" href="#域名服务器" aria-hidden="true">#</a></h2><p>DNS服务器有很多台，根据层次结构分为三层，根域名服务器，顶级域名服务器，权限域名服务器</p><p>本地域名服务器不算层次结构，特点是离主机比较近，当主机和另一台比较近的主机通信时，就不用走哪些更高级的服务器了</p><p>根域名服务器并不是一个域名只有一台，而是一个域名对应多台域名服务器，全世界一共有 13个 这样的域名，分别是 <a href="http://a.rootservers.net" target="_blank" rel="noreferrer">a.rootservers.net</a>，<a href="http://b.rootservers.net" target="_blank" rel="noreferrer">b.rootservers.net</a>，<a href="http://c.rootservers.net" target="_blank" rel="noreferrer">c.rootservers.net</a>，... ， <a href="http://m.rootservers.net" target="_blank" rel="noreferrer">m.rootservers.net</a></p><p>在权限域名服务器中，虽然看似 <a href="http://abc.com" target="_blank" rel="noreferrer">abc.com</a> 比 <a href="http://y.abc.com" target="_blank" rel="noreferrer">y.abc.com</a> 少了一位，但是他们的<strong>地位仍是对等的</strong>，对应的两台权限域名服务器</p><p><img src="'+o+'" alt=""></p><h2 id="域名解析过程" tabindex="-1">域名解析过程 <a class="header-anchor" href="#域名解析过程" aria-hidden="true">#</a></h2><p><img src="'+s+'" alt=""></p><h3 id="递归查询" tabindex="-1">递归查询 <a class="header-anchor" href="#递归查询" aria-hidden="true">#</a></h3><p>主机先是向本地域名服务器发送请求，如果查不到的话，</p><p><strong>本地域名服务器</strong>向根域名服务器发送请求（找别人），如果还是查不到的话</p><p><strong>根域名域名服务器</strong>向顶级域名服务器发送请求（找别人），如果还是查不到的话</p><p><strong>顶级域名服务器</strong>向权限域名服务器发送请求（找别人）</p><p>可以看到每一次向下一个查询的服务器都变了，不是主机一个个去问，而是<strong>服务器自己一个个问下去</strong></p><h3 id="迭代查询" tabindex="-1">迭代查询 <a class="header-anchor" href="#迭代查询" aria-hidden="true">#</a></h3><p>主机先是想本地域名服务器发送请求，如果查不到的话，</p><p>本地域名服务器就让<strong>主机</strong>去向根域名服务器发送请求（主机去找，本地域名给目标根域名服务器的 IP 地址），如果还是查不到的话，</p><p>根域名域名服务器让<strong>主机</strong>去向对应的顶级域名服务器发送请求（主机去找，根域名给目标顶级域名服务器的 IP 地址），如果还是查不到的话，</p><p>顶级域名服务器让<strong>主机</strong>去向权限域名服务器发送请求（主机去找，顶级域名给目标权限域名服务器的 IP 地址）</p><p>可以看到这里是<strong>主机</strong>一个个挨个问的地址</p>',25),l=[d];function p(h,c,g,_,f,m){return r(),t("div",null,l)}const k=e(i,[["render",p]]);export{b as __pageData,k as default};
