import{_ as n,o as l,c as e,i as t,a as s,j as o}from"./app.79c949f5.js";const p="/imgs/web/js/js-core-1.webp",c="/imgs/web/js/js-core-2.webp",r="/imgs/web/js/js-core-3.webp",i="/imgs/web/js/js-core-4.webp",d="/imgs/web/js/js-core-5.webp",x=JSON.parse('{"title":"JavaScript - DOM、BOM 与事件","description":"","frontmatter":{},"headers":[{"level":2,"title":"DOM","slug":"dom","link":"#dom","children":[{"level":3,"title":"什么是 DOM","slug":"什么是-dom","link":"#什么是-dom","children":[]},{"level":3,"title":"DOM 树","slug":"dom-树","link":"#dom-树","children":[]},{"level":3,"title":"获取元素","slug":"获取元素","link":"#获取元素","children":[]},{"level":3,"title":"事件基础","slug":"事件基础","link":"#事件基础","children":[]},{"level":3,"title":"操作元素","slug":"操作元素","link":"#操作元素","children":[]},{"level":3,"title":"自定义属性值","slug":"自定义属性值","link":"#自定义属性值","children":[]},{"level":3,"title":"H5 自定义属性","slug":"h5-自定义属性","link":"#h5-自定义属性","children":[]},{"level":3,"title":"结点操作","slug":"结点操作","link":"#结点操作","children":[]},{"level":3,"title":"三种动态创建元素区别","slug":"三种动态创建元素区别","link":"#三种动态创建元素区别","children":[]}]},{"level":2,"title":"事件高级","slug":"事件高级","link":"#事件高级","children":[{"level":3,"title":"注册事件","slug":"注册事件","link":"#注册事件","children":[]},{"level":3,"title":"删除事件","slug":"删除事件","link":"#删除事件","children":[]},{"level":3,"title":"DOM 事件流","slug":"dom-事件流","link":"#dom-事件流","children":[]},{"level":3,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":3,"title":"事件对象的常见属性和方法","slug":"事件对象的常见属性和方法","link":"#事件对象的常见属性和方法","children":[]},{"level":3,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]},{"level":3,"title":"常用鼠标事件","slug":"常用鼠标事件","link":"#常用鼠标事件","children":[]},{"level":3,"title":"常用键盘事件","slug":"常用键盘事件","link":"#常用键盘事件","children":[]}]},{"level":2,"title":"BOM","slug":"bom","link":"#bom","children":[{"level":3,"title":"什么是 BOM","slug":"什么是-bom","link":"#什么是-bom","children":[]},{"level":3,"title":"BOM 的构成","slug":"bom-的构成","link":"#bom-的构成","children":[]},{"level":3,"title":"window 对象常用事件","slug":"window-对象常用事件","link":"#window-对象常用事件","children":[]},{"level":3,"title":"定时器","slug":"定时器","link":"#定时器","children":[]},{"level":3,"title":"JavaScript 执行机制","slug":"javascript-执行机制","link":"#javascript-执行机制","children":[]},{"level":3,"title":"location 对象","slug":"location-对象","link":"#location-对象","children":[]},{"level":3,"title":"history 对象","slug":"history-对象","link":"#history-对象","children":[]}]},{"level":2,"title":"PC 端网页特效","slug":"pc-端网页特效","link":"#pc-端网页特效","children":[{"level":3,"title":"元素偏移量 offset 系列","slug":"元素偏移量-offset-系列","link":"#元素偏移量-offset-系列","children":[]},{"level":3,"title":"元素可视区 client 系列","slug":"元素可视区-client-系列","link":"#元素可视区-client-系列","children":[]},{"level":3,"title":"元素滚动 scroll 系列","slug":"元素滚动-scroll-系列","link":"#元素滚动-scroll-系列","children":[]},{"level":3,"title":"mouseenter 与 mouseover 区别","slug":"mouseenter-与-mouseover-区别","link":"#mouseenter-与-mouseover-区别","children":[]}]},{"level":2,"title":"classdList 类名操作","slug":"classdlist-类名操作","link":"#classdlist-类名操作","children":[]},{"level":2,"title":"本地存储","slug":"本地存储","link":"#本地存储","children":[{"level":3,"title":"window.sessionStorage","slug":"window-sessionstorage","link":"#window-sessionstorage","children":[]},{"level":3,"title":"window.localStorage","slug":"window-localstorage","link":"#window-localstorage","children":[]}]}],"relativePath":"md/web/js/js-core.md","lastUpdated":1673958488000}'),y={name:"md/web/js/js-core.md"},D=s('<h1 id="javascript-dom、bom-与事件" tabindex="-1">JavaScript - DOM、BOM 与事件 <a class="header-anchor" href="#javascript-dom、bom-与事件" aria-hidden="true">#</a></h1><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-hidden="true">#</a></h2><h3 id="什么是-dom" tabindex="-1">什么是 DOM <a class="header-anchor" href="#什么是-dom" aria-hidden="true">#</a></h3><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言的标准编程接口</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式</p><h3 id="dom-树" tabindex="-1">DOM 树 <a class="header-anchor" href="#dom-树" aria-hidden="true">#</a></h3><p><img src="'+p+`" alt=""></p><ul><li>文档：一个页面就是一个文档，DOM 中使用 <strong>document</strong> 表示</li><li>元素：页面中所有的标签都是元素，DOM 中使用 <strong>element</strong> 表示</li><li>结点：网页中所有的内容都是结点（标签、属性、文本、注释等），DOM 中用 <strong>node</strong> 表示</li></ul><h3 id="获取元素" tabindex="-1">获取元素 <a class="header-anchor" href="#获取元素" aria-hidden="true">#</a></h3><p>DOM 在我们实际开发过程中主要用来操作元素，获取页面中的元素可以使用以下几种方式：</p><ul><li><strong>根据 id 获取</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// id 是大小写敏感的字符串</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(id)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>因为我们文档页面从上往下加载，所以先得有标签，我们 &lt;script&gt; 要写到标签下面。</p></li><li><p>返回的是一个 Element 对象。</p></li><li><p><strong>根据标签名获取</strong>。</p></li></ul></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// tagName 是字符串，标签名</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> elements_set </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByTagName</span><span style="color:#A6ACCD;">(tagname)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>返回带有指定标签名的对象的集合，以伪数组的形式存储；即使没有该标签，返回的也是个空数组。</p></div><p>如果想获得指定父元素下的子元素，可以如下语法实现：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lis </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parentElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementByTagName</span><span style="color:#A6ACCD;">(tagname)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"></span></code></pre></div><ul><li><strong>通过 HTML5 新增的方法获取（推荐）</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByClassName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">类名</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 根据类名返回元素对象集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">选择器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;">// 根据指定选择器返回第一个元素对象 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">选择器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;">// 根据指定选择器返回所有元素</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>特殊元素获取</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;">// 返回 body 元素对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ht </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement   </span><span style="color:#676E95;">// 返回 html 元素对象</span></span>
<span class="line"></span></code></pre></div><h3 id="事件基础" tabindex="-1">事件基础 <a class="header-anchor" href="#事件基础" aria-hidden="true">#</a></h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为</p><p>简单理解：触发——响应机制</p><p>网页中每个元素都可以产生某些可以触发的 JavaScript 事件，例如点击提交按钮</p><p><strong>事件三要素</strong>：</p><ul><li><strong>事件源</strong>：事件被触发的对象，例如表单的提交按钮</li><li><strong>事件类型</strong>：如何触发，什么事件，例如提交按钮的单击事件</li><li><strong>事件处理程序</strong>：通过一个函数赋值的方式完成</li></ul><p><strong>执行事件的步骤</strong>：</p><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采用函数赋值的形式）</li></ol><p><strong>常见的事件：</strong></p><table><thead><tr><th style="text-align:center;"><strong>事件</strong></th><th style="text-align:center;"><strong>触发条件</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>onclick</code></td><td style="text-align:center;">单击事件</td></tr><tr><td style="text-align:center;"><code>onmouseover</code></td><td style="text-align:center;">鼠标经过</td></tr><tr><td style="text-align:center;"><code>onmouseout</code></td><td style="text-align:center;">鼠标离开</td></tr><tr><td style="text-align:center;"><code>onfocus</code></td><td style="text-align:center;">获得鼠标焦点</td></tr><tr><td style="text-align:center;"><code>onblur</code></td><td style="text-align:center;">失去鼠标焦点</td></tr><tr><td style="text-align:center;"><code>onmousemove</code></td><td style="text-align:center;">鼠标移动</td></tr><tr><td style="text-align:center;"><code>onmouseup</code></td><td style="text-align:center;">鼠标弹起触发</td></tr><tr><td style="text-align:center;"><code>onmousedown</code></td><td style="text-align:center;">鼠标按下触发</td></tr></tbody></table><h3 id="操作元素" tabindex="-1">操作元素 <a class="header-anchor" href="#操作元素" aria-hidden="true">#</a></h3><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等：</p><h4 id="修改元素内容" tabindex="-1">修改元素内容 <a class="header-anchor" href="#修改元素内容" aria-hidden="true">#</a></h4><ul><li><p>从起始位置到终止位置的内容, 但它<strong>去除 html 标签</strong>， 同时空格和换行也会去掉 IE</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText</span></span>
<span class="line"></span></code></pre></div></li><li><p>起始位置到终止位置的全部内容，<strong>包括 html 标签</strong>，同时保留空格和换行 W3C</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span></span>
<span class="line"></span></code></pre></div></li></ul><h4 id="修改元素属性" tabindex="-1">修改元素属性 <a class="header-anchor" href="#修改元素属性" aria-hidden="true">#</a></h4><p>例如 <code>src</code>、<code>href</code>、<code>id</code>、<code>alt</code>、<code>title</code> 等</p><p>修改元素内容用 <code>元素名.属性 = ...</code></p><h4 id="表单元素的属性操作" tabindex="-1">表单元素的属性操作 <a class="header-anchor" href="#表单元素的属性操作" aria-hidden="true">#</a></h4><p>利用 DOM 可以操作如下表单元素的属性： <code>type</code>、<code>value</code>、<code>checked</code>、<code>selected</code>、<code>disabled</code></p><h4 id="修改样式属性" tabindex="-1">修改样式属性 <a class="header-anchor" href="#修改样式属性" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">属性 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 值        </span><span style="color:#676E95;">// 行内样式操作</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 新类名     </span><span style="color:#676E95;">// 类名样式操作，会覆盖原先的类名</span></span>
<span class="line"></span></code></pre></div><h3 id="自定义属性值" tabindex="-1">自定义属性值 <a class="header-anchor" href="#自定义属性值" aria-hidden="true">#</a></h3><h4 id="获取自定义属性值" tabindex="-1">获取自定义属性值 <a class="header-anchor" href="#获取自定义属性值" aria-hidden="true">#</a></h4><ul><li><code>element.属性</code></li><li><code>element.getAttribute(&#39;属性&#39;)</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>区别：前者只能获得内置的属性值，自定义添加的属性的值只能通过第二种方法获取</strong>。</p></div><h4 id="设置自定义属性值" tabindex="-1">设置自定义属性值 <a class="header-anchor" href="#设置自定义属性值" aria-hidden="true">#</a></h4><ul><li><code>element.属性 = &#39;值&#39;</code></li><li><code>element.setAttribute(&#39;属性&#39;, &#39;值&#39;)</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>第二个主要针对自定义属性。</p></div><h4 id="删除自定义属性" tabindex="-1">删除自定义属性 <a class="header-anchor" href="#删除自定义属性" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">属性</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="h5-自定义属性" tabindex="-1">H5 自定义属性 <a class="header-anchor" href="#h5-自定义属性" aria-hidden="true">#</a></h3><h4 id="设置-h5-自定义属性" tabindex="-1">设置 H5 自定义属性 <a class="header-anchor" href="#设置-h5-自定义属性" aria-hidden="true">#</a></h4><p>H5 规定自定义属性 <code>data-</code> 开头作为属性名并且赋值，例如：<code>&lt;div data-index=&quot;1&quot;&gt;&lt;/div&gt;</code></p><h4 id="h5-新增获取属性方法" tabindex="-1">H5 新增获取属性方法 <a class="header-anchor" href="#h5-新增获取属性方法" aria-hidden="true">#</a></h4><ul><li><code>element.getAttribute(&#39;data-index&#39;)</code></li><li><code>element.dataset.index</code> 或 <code>element.dataset[&#39;index&#39;]</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果要获取这个属性：<code>&lt;div data-list-name=&quot;eye&quot;&gt;&lt;/div&gt;</code>，可以用如下方法获取：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">listName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">listName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>显然，多个连接线连接的单词，获取属性时用驼峰命名法获取。</p></div><h3 id="结点操作" tabindex="-1">结点操作 <a class="header-anchor" href="#结点操作" aria-hidden="true">#</a></h3><h4 id="为什么学结点操作" tabindex="-1">为什么学结点操作 <a class="header-anchor" href="#为什么学结点操作" aria-hidden="true">#</a></h4><p>获取元素通常使用两种方式：</p><ol><li><p>利用 DOM 提供的方法获取元素</p><ul><li><code>document.getElementById()</code></li><li><code>document.getElementsByTagName()</code></li><li><code>document.querySelector()</code> 等</li><li>逻辑性不强、繁琐</li></ul></li><li><p>利用结点层级关系获取元素</p><ul><li>利用父子兄结点关系获取元素</li><li>逻辑性强， 但是兼容性稍差</li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这两种方式都可以获取元素节点，我们后面都会使用，但是结点操作更简单。</p></div><h4 id="结点概述" tabindex="-1">结点概述 <a class="header-anchor" href="#结点概述" aria-hidden="true">#</a></h4><p>一般地，结点至少拥有 <strong>nodeType（结点类型）</strong>、<strong>nodeName（结点名称）</strong> 和 <strong>nodeValue（结点值）</strong> 这三个基本属性。</p><ul><li>元素结点 <strong>nodeType</strong> 为 <strong>1</strong></li><li>属性结点 <strong>nodeType</strong> 为 <strong>2</strong></li><li>文本结点 <strong>nodeType</strong> 为 <strong>3</strong> （文本结点包含文字、空格、换行等）</li></ul><p>我们在实际开发中，结点操作主要操作的是<strong>元素结点</strong></p><h4 id="结点层级" tabindex="-1">结点层级 <a class="header-anchor" href="#结点层级" aria-hidden="true">#</a></h4><p>利用 DOM 树可以把结点划分为不同的层级关系，常见的是父子兄层级关系。</p><ul><li><strong>父级结点</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> parent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><ul><li><code>parentNode</code> 属性可返回某结点的父结点，注意是<strong>最近的一个父结点</strong></li><li>如果指定的结点没有父结点则返回 <code>null</code></li></ul></blockquote><ul><li><strong>子结点</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> nodes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 返回所有子结点，包含元素结点、文本结点等等</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> first </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstChild</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 返回第一个子结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> last </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastChild</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 返回最后一个子结点</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如果只想要获得里面的元素结点，则需要专门处理。 所以我们一般不提倡使用 <code>childNodes</code>。</p></blockquote><p>获取子元素的结点应用如下方法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> children </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;">// 获取所有子元素的结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> first </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstElementChild</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 返回第一个子元素结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> last </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastElementChild</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 返回最后一个子元素结点</span></span>
<span class="line"></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>后两个方法有兼容问题！</p></div><p>实际开发的写法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 返回第一个子元素结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> first </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                       </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 返回最后一个子元素结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> last </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children[node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ul><li><strong>兄弟结点</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 获取当前元素下一个兄弟结点，找不到则返回 null</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> next </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSibling</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 获取当前元素上一个兄弟结点，找不到则返回 null</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> previous </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">previousSibling</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><blockquote><p>该方法也针对所有的类型的结点（元素结点、文本结点等）。</p></blockquote><p>同样地，针对元素类型结点，有如下方法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 获取当前元素的下一个元素类型的兄弟结点，找不到则返回 null</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> next </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextElementSibling</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 获取当前元素的上一个元素类型的兄弟结点，找不到则返回 null</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> previous </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">previousElementSibling</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h4 id="创建结点" tabindex="-1">创建结点 <a class="header-anchor" href="#创建结点" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 1. 创建元素结点</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> childNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tagName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;">// 2. 添加结点</span></span>
<span class="line"><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(childNode)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 添加的结点是子级后面追加的元素        </span></span>
<span class="line"></span></code></pre></div><p>也可以插入结点到指定结点之前：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">123</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> li </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ul </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// parentNode.insertBefore(childNode, 指定结点)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ul</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertBefore</span><span style="color:#A6ACCD;">(li</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ul</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="删除结点" tabindex="-1">删除结点 <a class="header-anchor" href="#删除结点" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> deleted </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#A6ACCD;">(childNode)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// 返回被删除的结点</span></span>
<span class="line"></span></code></pre></div><h4 id="复制结点" tabindex="-1">复制结点 <a class="header-anchor" href="#复制结点" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#A6ACCD;">()            </span><span style="color:#676E95;">// 括号为空或者里面是 false，只复制标签不复制里面的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;">// 括号为 true 是深拷贝，复制标签里面的内容</span></span>
<span class="line"></span></code></pre></div><h3 id="三种动态创建元素区别" tabindex="-1">三种动态创建元素区别 <a class="header-anchor" href="#三种动态创建元素区别" aria-hidden="true">#</a></h3><ul><li><p><code>document.write()</code></p><p>如果页面文档流加载完毕，再调用此方法会导致页面重绘</p></li><li><p><code>element.innerHTML</code></p><p>创建多个元素如果采用拼接字符串，效率低，所以采用数组方式拼接，结构稍复杂</p></li><li><p><code>document.createElement()</code></p><p>创建多个元素效率稍低，但是结构更清晰</p></li></ul><h2 id="事件高级" tabindex="-1">事件高级 <a class="header-anchor" href="#事件高级" aria-hidden="true">#</a></h2><h3 id="注册事件" tabindex="-1">注册事件 <a class="header-anchor" href="#注册事件" aria-hidden="true">#</a></h3><p>给元素添加事件，称为注册事件或者绑定事件</p><p>注册事件有两种方式：传统方式和方法监听注册方式</p><ul><li><p><strong>传统注册方式</strong></p><p>利用 on 开头的函数事件</p><p>注册事件是唯一的，同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p></li><li><p><strong>方法监听注册方式</strong></p><p>W3C 标准推荐方式 <code>addEventListener()</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> listner[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useCapture])</span></span>
<span class="line"></span></code></pre></div><p><code>eventTarget.addEventListener()</code> 方法将指定的监听器注册到 <code>eventTarget</code>（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><ul><li><code>type</code>：事件类型字符串，比如 click、mouseover，主力，这里不要带 on</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false</li></ul></li></ul><h3 id="删除事件" tabindex="-1">删除事件 <a class="header-anchor" href="#删除事件" aria-hidden="true">#</a></h3><ul><li><strong>传统注册方式</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>方法监听注册方式</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> listener[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useCapture])</span></span>
<span class="line"></span></code></pre></div><h3 id="dom-事件流" tabindex="-1">DOM 事件流 <a class="header-anchor" href="#dom-事件流" aria-hidden="true">#</a></h3><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个过程即 DOM 事件流</p><p>DOM 事件流分为 3 个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><p><img src="`+c+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>JavaScript 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li><code>onclick</code> 和 <code>attachEvent</code> 只能得到冒泡阶段。</li><li><code>addEventListener(type, listener[, useCapture]) </code>第三个参数如果是 <code>true</code>，表示在事件捕获阶段调用事件处理程序；如果是 <code>false</code>（不写默认就是 <code>false</code>），表示在事件冒泡阶段调用事件处理程序。</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如 <code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code>。</li><li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事。</li></ul></div><h3 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-hidden="true">#</a></h3><ul><li><p>event 就是一个事件对象，写到我们监听函数的小括号里面 ，当形参看</p></li><li><p>事件对象只有有了事件才会存在，它是系统自动创建的，不需要我们传递参数</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 默认第一个参数就是传进来的事件对象  </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ul><li><p>事件对象是事件的一系列相关的数据的集合，根据不同的事件包含不同的信息</p></li><li><p>由于兼容性问题，可以这么写：<code>event = event || window.event;</code>，但是目前一般不考虑兼容问题</p></li></ul><h3 id="事件对象的常见属性和方法" tabindex="-1">事件对象的常见属性和方法 <a class="header-anchor" href="#事件对象的常见属性和方法" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:center;"><strong>事件对象属性方法</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>e.target</code></td><td style="text-align:center;"><strong>返回触发事件的对象，标准</strong></td></tr><tr><td style="text-align:center;"><code>e.srcElement</code></td><td style="text-align:center;">返回触发事件的对象，非标准，ie 6-8 使用</td></tr><tr><td style="text-align:center;"><code>e.type</code></td><td style="text-align:center;"><strong>返回事件的类型，比如 <code>click</code>，<code>mouseover</code>，不带 <code>on</code></strong></td></tr><tr><td style="text-align:center;"><code>e.cancelBubble</code></td><td style="text-align:center;">该属性阻止冒泡，非标准，ie 6-8 使用</td></tr><tr><td style="text-align:center;"><code>e.returnValue</code></td><td style="text-align:center;">该属性阻止默认事件（默认行为） 非标准，ie 6-8 使用，比如不让链接跳转</td></tr><tr><td style="text-align:center;"><code>e.preventDefault()</code></td><td style="text-align:center;"><strong>该方法阻止默认事件，标准，比如不让链接跳转</strong></td></tr><tr><td style="text-align:center;"><code>e.stopPropagation()</code></td><td style="text-align:center;"><strong>阻止冒泡，标准</strong></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>e.target</code> 点击了哪个元素，就返回哪个元素；</li><li><code>this</code> 是哪个元素绑定了这个点击事件，那么就返回谁</li></ul></div><p><strong>【阻止默认行为】</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">     </span><span style="color:#676E95;">// 这样单击超链接就不会跳转了</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>【阻止事件冒泡】</strong></p><p>利用事件对象里面的 <code>stopPropagation()</code> 方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> son </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.son</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">son</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">son</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopPrapagation</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-hidden="true">#</a></h3><p><strong>原理：不是每个子结点单独设置事件监听器，而是事件监听器设置在其父结点上，然后利用冒泡原理影响设置每个子结点</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">select</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">　　　　</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">　　　　</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">　　　　</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nodeName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">　　</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> select</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="常用鼠标事件" tabindex="-1">常用鼠标事件 <a class="header-anchor" href="#常用鼠标事件" aria-hidden="true">#</a></h3><h4 id="禁止右键菜单" tabindex="-1">禁止右键菜单 <a class="header-anchor" href="#禁止右键菜单" aria-hidden="true">#</a></h4><p><code>contextmenu</code> 主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contextmenu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h4 id="禁止鼠标选中" tabindex="-1">禁止鼠标选中 <a class="header-anchor" href="#禁止鼠标选中" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">selectstart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h4 id="鼠标事件对象" tabindex="-1">鼠标事件对象 <a class="header-anchor" href="#鼠标事件对象" aria-hidden="true">#</a></h4><p>event 对象代表事件的状态，跟事件相关的一系列信息的集合。鼠标事件对象是 <code>MouseEvent</code></p><table><thead><tr><th style="text-align:center;"><strong>鼠标事件对象属性</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>e.clientX</code></td><td style="text-align:center;">返回鼠标相对于<strong>浏览器窗口可视区</strong>的 X 坐标</td></tr><tr><td style="text-align:center;"><code>e.clientY</code></td><td style="text-align:center;">返回鼠标相对于<strong>浏览器窗口可视区</strong>的 Y 坐标</td></tr><tr><td style="text-align:center;"><code>e.pageX</code></td><td style="text-align:center;">返回鼠标相对于<strong>文档页面</strong>的 X 坐标 IE 9+ 支持</td></tr><tr><td style="text-align:center;"><code>e.pageY</code></td><td style="text-align:center;">返回鼠标相对于<strong>文档页面</strong>的 Y 坐标 IE 9+ 支持</td></tr><tr><td style="text-align:center;"><code>e.screenX</code></td><td style="text-align:center;">返回鼠标相对于<strong>电脑屏幕</strong>的 X 坐标</td></tr><tr><td style="text-align:center;"><code>e.screenY</code></td><td style="text-align:center;">返回鼠标相对于<strong>电脑屏幕</strong>的 Y 坐标</td></tr></tbody></table><h3 id="常用键盘事件" tabindex="-1">常用键盘事件 <a class="header-anchor" href="#常用键盘事件" aria-hidden="true">#</a></h3><h4 id="按键-弹起" tabindex="-1">按键/弹起 <a class="header-anchor" href="#按键-弹起" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:center;"><strong>键盘事件</strong></th><th style="text-align:center;"><strong>触发条件</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>onkeyup</code></td><td style="text-align:center;">某个键盘按键被松开时触发</td></tr><tr><td style="text-align:center;"><code>onkeydown</code></td><td style="text-align:center;">某个键盘按键被按下时触发</td></tr><tr><td style="text-align:center;"><code>onkeypress</code></td><td style="text-align:center;">某个键盘按键被按下时触发，但是它<strong>不能识别功能键</strong>，如 Ctrl、Shift 等</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>执行顺序：<code>keydown</code> &gt; <code>keypress </code>&gt; <code>keyup</code></p></div><h4 id="键盘事件对象" tabindex="-1">键盘事件对象 <a class="header-anchor" href="#键盘事件对象" aria-hidden="true">#</a></h4><p>键盘事件对象是 <code>KeyboardEvent</code>，它有一个 <code>keyCode</code> 属性，返回按键的 ASCII 码值</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>keyup</code> 和 <code>keydown</code> 事件不区分字母大小写， <code>a</code> 和 <code>A</code> 得到的都是 $65$</li><li><code>keypress</code> 事件区分大小写</li></ul></div><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-hidden="true">#</a></h2><h3 id="什么是-bom" tabindex="-1">什么是 BOM <a class="header-anchor" href="#什么是-bom" aria-hidden="true">#</a></h3><p>ECMAScript 是JavaScript 的核心，但如果要在 Web 中使用JavaScript，那么 BOM（浏览器对象模型）则无疑才是真正的核心。BOM 提供了很多对象，用于访问浏览器的功能，这些功能与任何网页内容无关。多年来，缺少事实上的规范导致 BOM 既有意思又有问题，因为浏览器提供商会按照各自的想法随意去扩展它。于是，浏览器之间共有的对象就成为了事实上的标准。</p><h3 id="bom-的构成" tabindex="-1">BOM 的构成 <a class="header-anchor" href="#bom-的构成" aria-hidden="true">#</a></h3><p><code>window</code> 对象是<strong>浏览器的顶级对象</strong>，它具有双重角色</p><ul><li>它是 JS 访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 <code>window</code> 对象的属性和方法。</li></ul><p>在调用的时候可以省略 <code>window</code>，前面学习的对话框都属于 <code>window</code> 对象方法，如 <code>alert()</code>、<code>prompt()</code> 等</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意 <code>window</code> 下的一个特殊属性 <code>window.name</code>。</p></div><h3 id="window-对象常用事件" tabindex="-1">window 对象常用事件 <a class="header-anchor" href="#window-对象常用事件" aria-hidden="true">#</a></h3><h4 id="窗口加载事件" tabindex="-1">窗口加载事件 <a class="header-anchor" href="#窗口加载事件" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){};</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p><code>window.onload</code> 是窗口加载事件，当文档内容完全加载完成时会触发该事件（包括图像、脚本文件、CSS 文件等），调用处理函数。</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>DOMContentLoaded</code> 事件触发时，仅当 DOM 加载完成，不包括样式表、图片、flash 等， IE 9 以上支持</p><blockquote><p>如果页面的图片很多的话, 从用户访问到 <code>onload</code> 触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用 <code>DOMContentLoaded</code> 事件比较合适。</p></blockquote><h4 id="调整窗口大小事件" tabindex="-1">调整窗口大小事件 <a class="header-anchor" href="#调整窗口大小事件" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onresize</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){};</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>当调整窗口大小时会触发该事件。</p></blockquote><h3 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-hidden="true">#</a></h3><p>window 对象给我们提供了 2 个非常好用的方法——定时器</p><ul><li><code>setTimeout()</code></li><li><code>setInterval()</code></li></ul><h4 id="settimeout-定时器" tabindex="-1">setTimeout() 定时器 <a class="header-anchor" href="#settimeout-定时器" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(调用函数[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 延迟的毫秒数])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>setTimeout()</code> 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</p><p>可以通过 <code>window.clearTimeout(timeoutID)</code> 停止定时器，所以一般要给定时器命名</p><h4 id="setinterval-定时器" tabindex="-1">setInterval() 定时器 <a class="header-anchor" href="#setinterval-定时器" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(回调函数[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 间隔的毫秒数])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>setInterval()</code> 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</p><p>可以通过 <code>window.clearInterval(intervalID)</code>方法停止 <code>setInterval()</code> 定时器</p><h3 id="javascript-执行机制" tabindex="-1">JavaScript 执行机制 <a class="header-anchor" href="#javascript-执行机制" aria-hidden="true">#</a></h3><h4 id="javascript-是单线程" tabindex="-1">JavaScript 是单线程 <a class="header-anchor" href="#javascript-是单线程" aria-hidden="true">#</a></h4><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h4 id="同步与异步" tabindex="-1">同步与异步 <a class="header-anchor" href="#同步与异步" aria-hidden="true">#</a></h4><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p><ul><li><p>同步</p><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p></li><li><p>异步</p><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>本质区别： 这条流水线上各个流程的执行顺序不同。</strong></p></div><p><strong>【同步任务】</strong></p><p>同步任务都在主线程上执行，形成一个执行栈</p><p><strong>【异步任务】</strong></p><p>JS 的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型:</p><ul><li>普通事件，如 click、resize 等</li><li>资源加载，如 load、error 等</li><li>定时器，包括 setInterval、setTimeout 等</li></ul><p>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）</p><ol><li>先执行执行栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><h3 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-hidden="true">#</a></h3><p>window 对象给我们提供了一个 <code>location</code> 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 <code>location</code> 对象</p><h4 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-hidden="true">#</a></h4><p>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址</p><p>互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p><p>URL 的一般语法格式为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> protocol://host[:port]/path/[?query]#fragment</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> http://www.itcast.cn/index.html?name=andy&amp;age=18#link</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><table><thead><tr><th style="text-align:center;"><strong>组成</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">protocol</td><td style="text-align:center;">通信协议，如：http，ftp，maito 等</td></tr><tr><td style="text-align:center;">host</td><td style="text-align:center;">主机（域名），如：<a href="http://www.baidu.com" target="_blank" rel="noreferrer">www.baidu.com</a></td></tr><tr><td style="text-align:center;">port</td><td style="text-align:center;">端口号（可选），省略时使用方案的默认端口，如 http 的默认端口 80</td></tr><tr><td style="text-align:center;">path</td><td style="text-align:center;">路径，由另个或多个 <code>/</code> 符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td style="text-align:center;">query</td><td style="text-align:center;">参数，以键值对的形式，通过 <code>&amp;</code> 符号分隔开来</td></tr><tr><td style="text-align:center;">fragment</td><td style="text-align:center;">片段，<code>#</code> 后面内容。常见于链接，锚点</td></tr></tbody></table><h4 id="location-对象的属性" tabindex="-1">location 对象的属性 <a class="header-anchor" href="#location-对象的属性" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:center;"><strong>属性</strong></th><th style="text-align:center;"><strong>返回值</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>location.href</code></td><td style="text-align:center;">获取挥着设置整个 URL</td></tr><tr><td style="text-align:center;"><code>location.host</code></td><td style="text-align:center;">返回主机（域名） <a href="http://www.baidu.com" target="_blank" rel="noreferrer">www.baidu.com</a></td></tr><tr><td style="text-align:center;"><code>location.port</code></td><td style="text-align:center;">返回端口号，如果未写，返回空字符串</td></tr><tr><td style="text-align:center;"><code>location.pathname</code></td><td style="text-align:center;">返回路径</td></tr><tr><td style="text-align:center;"><code>location.search</code></td><td style="text-align:center;">返回参数</td></tr><tr><td style="text-align:center;"><code>location.hash</code></td><td style="text-align:center;">返回片段，#后面内容，常见于链接，锚点</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>重点记住 <code>href</code> 和 <code>search </code>。</p></div><h4 id="location-对象的方法" tabindex="-1">location 对象的方法 <a class="header-anchor" href="#location-对象的方法" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:center;"><strong>方法</strong></th><th style="text-align:center;"><strong>返回值</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>location.assign()</code></td><td style="text-align:center;">跟 href 一样，可以跳转页面（也称为重定向）</td></tr><tr><td style="text-align:center;"><code>location.replace()</code></td><td style="text-align:center;">替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td style="text-align:center;"><code>location.reload()</code></td><td style="text-align:center;">重新加载页面，相对于刷新按钮或者 <kbd>F5</kbd> ，如果参数为 <code>true</code>，则表示强制刷新 <kbd>Ctrl</kbd> + <kbd>F5</kbd></td></tr></tbody></table><h3 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-hidden="true">#</a></h3><p>window 对象给我们提供了一个 <code>history</code> 对象，与浏览器历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的 URL</p><table><thead><tr><th style="text-align:center;"><strong>方法</strong></th><th style="text-align:center;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>back()</code></td><td style="text-align:center;">可以后退功能</td></tr><tr><td style="text-align:center;"><code>forward()</code></td><td style="text-align:center;">前进功能</td></tr><tr><td style="text-align:center;"><code>go(参数)</code></td><td style="text-align:center;">前进后退功能，如果参数是 1，就前进一个页面，参数是 -1，就后退一个页面</td></tr></tbody></table><h2 id="pc-端网页特效" tabindex="-1">PC 端网页特效 <a class="header-anchor" href="#pc-端网页特效" aria-hidden="true">#</a></h2><h3 id="元素偏移量-offset-系列" tabindex="-1">元素偏移量 offset 系列 <a class="header-anchor" href="#元素偏移量-offset-系列" aria-hidden="true">#</a></h3><p><code>offset </code>翻译过来就是偏移量， 我们使用 <code>offset</code> 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ul><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意： 返回的数值都不带单位</p></li></ul><p><code>offset</code> 系列常用属性</p><p><img src="`+r+'" alt=""></p><table><thead><tr><th style="text-align:center;"><strong>属性</strong></th><th style="text-align:center;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>element.offsetParent</code></td><td style="text-align:center;">返回作为该元素带有定位的父级元素，如果父级都没有定位，则返回 <code>body</code></td></tr><tr><td style="text-align:center;"><code>element.offsetTop</code></td><td style="text-align:center;"><strong>返回元素相对带有定位父元素上方的偏移</strong></td></tr><tr><td style="text-align:center;"><code>element.offsetLeft</code></td><td style="text-align:center;"><strong>返回元素相对带有定位父元素左边框的偏移</strong></td></tr><tr><td style="text-align:center;"><code>element.offsetWidth</code></td><td style="text-align:center;"><strong>返回自身包括 padding、边框、内容区的宽度，返回数值不带单位</strong></td></tr><tr><td style="text-align:center;"><code>element.offsetHeight</code></td><td style="text-align:center;"><strong>返回自身包括 padding、边框、内容区的高度，返回数值不带单位</strong></td></tr></tbody></table><p><strong>【offset 与 style 的区别】</strong></p><p><img src="'+i+'" alt=""></p><h3 id="元素可视区-client-系列" tabindex="-1">元素可视区 client 系列 <a class="header-anchor" href="#元素可视区-client-系列" aria-hidden="true">#</a></h3><p><code>client</code> 翻译过来就是客户端，我们使用 <code>client</code> 系列的相关属性来获取元素可视区的相关信息。</p><p>通过 <code>client</code> 系列的相关属性可以动态的得到该元素的边框大小、元素大小等</p><table><thead><tr><th style="text-align:center;"><strong>属性</strong></th><th style="text-align:center;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>element.clientTop</code></td><td style="text-align:center;">返回元素上边框的高度</td></tr><tr><td style="text-align:center;"><code>element.clientLeft</code></td><td style="text-align:center;">返回元素左边框的宽度</td></tr><tr><td style="text-align:center;"><code>element.clientWidth</code></td><td style="text-align:center;"><strong>返回自身包括 padding，内容区宽度，不含边框，返回单位不带数值</strong></td></tr><tr><td style="text-align:center;"><code>element.clientHeight</code></td><td style="text-align:center;"><strong>返回自身包括 padding，内容区高度，不含边框，返回单位不带数值</strong></td></tr></tbody></table><h3 id="元素滚动-scroll-系列" tabindex="-1">元素滚动 scroll 系列 <a class="header-anchor" href="#元素滚动-scroll-系列" aria-hidden="true">#</a></h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等</p><table><thead><tr><th style="text-align:center;"><strong>属性</strong></th><th style="text-align:center;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>element.scrollTop</code></td><td style="text-align:center;"><strong>返回被卷去的上侧距离，返回数值不带单位</strong></td></tr><tr><td style="text-align:center;"><code>element.scrollLeft</code></td><td style="text-align:center;"><strong>返回被卷去的左侧距离，返回数值不带单位</strong></td></tr><tr><td style="text-align:center;"><code>element.scrollWidth</code></td><td style="text-align:center;">返回自身包括 padding，内容区的宽度，不含边框，返回单位不带数值</td></tr><tr><td style="text-align:center;"><code>element.scrollHeight</code></td><td style="text-align:center;">返回自身包括 padding，内容区的高度，不含边框，返回单位不带数值</td></tr></tbody></table><p><img src="'+d+'" alt=""></p><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部</p><p>滚动条在滚动时会触发 <code>onscroll</code> 事件</p><h3 id="mouseenter-与-mouseover-区别" tabindex="-1">mouseenter 与 mouseover 区别 <a class="header-anchor" href="#mouseenter-与-mouseover-区别" aria-hidden="true">#</a></h3><p>如果出现 <code>div</code> 套娃<code> div</code> ，且有重叠</p><ul><li><code>mouseover</code>：当鼠标经过父盒子会触发，子盒子重叠部分也会触发</li><li><code>mouseenter</code>：重叠部分不会触发该事件，<strong>因为 <code>mouseenter</code> 没有冒泡，相对应的有 <code>mouseleave</code> 事件也不会冒泡</strong></li></ul><h2 id="classdlist-类名操作" tabindex="-1">classdList 类名操作 <a class="header-anchor" href="#classdlist-类名操作" aria-hidden="true">#</a></h2>',227),F=s(`<details class="details custom-block"><summary>参考代码</summary><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-W7mmv" id="tab-B7IcFpc" checked="checked"><label for="tab-B7IcFpc">html</label><input type="radio" name="group-W7mmv" id="tab-Y6EyosM"><label for="tab-Y6EyosM">css</label><input type="radio" name="group-W7mmv" id="tab-rjjYwPL"><label for="tab-rjjYwPL">javascript</label></div><div class="blocks"><div class="language-html active"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">float</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin-left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1px</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">666</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">1dd1a1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">bg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hotpink</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// classList 返回元素的类名</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// 1. 添加类名  是在后面追加类名不会覆盖以前的类名 注意前面不需要加 &quot;.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// 2. 删除类名</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">// 3. 切换类</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 如果classList中存在给定的值，删除它，否则，添加它；</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toggle</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></div></div></details><h2 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-hidden="true">#</a></h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML 5 规范提出了相关解决方案</p><p><strong>本地存储特性</strong>：</p><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage 约 5M、localStorage 约 20M</p><p>4、只能存储字符串，可以将对象 JSON.stringify() 编码后存储</p><h3 id="window-sessionstorage" tabindex="-1">window.sessionStorage <a class="header-anchor" href="#window-sessionstorage" aria-hidden="true">#</a></h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、 以键值对的形式存储使用</p><ul><li><strong>存储数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>获取数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>删除数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>清空数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="window-localstorage" tabindex="-1">window.localStorage <a class="header-anchor" href="#window-localstorage" aria-hidden="true">#</a></h3><p>1、生命周期永久生效，除非手动删除，否则关闭页面也会存在</p><p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p><p>3、以键值对的形式存储使用</p><ul><li><strong>存储数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>获取数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>删除数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>清空数据</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,32);function C(A,h,g,u,v,b){const a=o("class-list");return l(),e("div",null,[D,t(a),F])}const k=n(y,[["render",C]]);export{x as __pageData,k as default};
