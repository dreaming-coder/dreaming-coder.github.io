import{_ as s,o as a,c as n,a as l}from"./app.cb08d402.js";const o="/imgs/web/js/js-foundation-1.webp",A=JSON.parse('{"title":"JavaScript - 基本概念","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"书写位置","slug":"书写位置","link":"#书写位置","children":[]},{"level":3,"title":"语法基础","slug":"语法基础","link":"#语法基础","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"操作符","slug":"操作符","link":"#操作符","children":[]},{"level":3,"title":"程序控制语句","slug":"程序控制语句","link":"#程序控制语句","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]}]},{"level":2,"title":"变量、作用域和内存问题","slug":"变量、作用域和内存问题","link":"#变量、作用域和内存问题","children":[{"level":3,"title":"基本类型和引用类型的值","slug":"基本类型和引用类型的值","link":"#基本类型和引用类型的值","children":[]},{"level":3,"title":"执行环境及作用域","slug":"执行环境及作用域","link":"#执行环境及作用域","children":[]},{"level":3,"title":"预解析","slug":"预解析","link":"#预解析","children":[]},{"level":3,"title":"垃圾收集","slug":"垃圾收集","link":"#垃圾收集","children":[]}]}],"relativePath":"md/web/js/js-foundation.md","lastUpdated":1673958488000}'),p={name:"md/web/js/js-foundation.md"},e=l(`<h1 id="javascript-基本概念" tabindex="-1">JavaScript - 基本概念 <a class="header-anchor" href="#javascript-基本概念" aria-hidden="true">#</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-hidden="true">#</a></h2><h3 id="书写位置" tabindex="-1">书写位置 <a class="header-anchor" href="#书写位置" aria-hidden="true">#</a></h3><ul><li><strong>行内式</strong></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">提交</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;">alert</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>内嵌式</strong></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>外部式</strong></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">&lt;!-- 引入外部 js 文件 --&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="语法基础" tabindex="-1">语法基础 <a class="header-anchor" href="#语法基础" aria-hidden="true">#</a></h3><h4 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-hidden="true">#</a></h4><p>所谓标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；</li><li>其他字符可以是字母、下划线、美元符号或数字。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>标识符区分大小写</li><li>不能使用关键字、保留字作为标识符</li><li>一般采用小驼峰命名方式</li></ul></div><h4 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-hidden="true">#</a></h4><ul><li>单行注释</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 单行注释</span></span>
<span class="line"></span></code></pre></div><ul><li>多行注释</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">/*</span></span>
<span class="line"><span style="color:#676E95;"> * 多行注释</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"></span></code></pre></div><h4 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-hidden="true">#</a></h4><p>在顶部添加代码 <code>&quot;use strict&quot;;</code> 用于告诉支持的 JavaScript 引擎切换到严格模式。在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 函数体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>严格模式用于消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为：</p><ul><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，增加运行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ul><p>严格模式下，JavaScript 的执行结果会有很大不同，一些在&quot;正常模式&quot;下可以运行的语句，在&quot;严格模式&quot;下将不能运行。</p><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h3><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 定义一个变量 message</span></span>
<span class="line"></span></code></pre></div><p>这行代码定义了一个名为 <code>message</code> 的变量，该变量可以用来保存任何值（像这样未经过初始化的变量，会保存一个特殊的值——<code>undefined</code>）。</p><p>有一点必须注意，即用 <code>var</code> 操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，如果在函数中使用 <code>var</code> 定义一个变量，那么这个变量在函数退出后就会被销毁，例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 局部变量</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(message)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 错误！</span></span>
<span class="line"></span></code></pre></div><p>这里，变量 <code>message</code> 是在函数中使用 <code>var</code> 定义的。当函数被调用时，就会创建该变量并为其赋值。而在此之后，这个变量又会立即被销毁，因此例子中的下一行代码就会导致错误。不过，可以像下面这样省略 <code>var </code> 操作符，从而创建一个全局变量：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 全局变量</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(message)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;hi&quot;</span></span>
<span class="line"></span></code></pre></div><p>这个例子省略了 <code>var</code> 操作符，因而 <code>message </code> 就成了全局变量。这样，只要调用过一次 <code>test()</code> 函数，这个变量就有了定义，就可以在函数外部的任何地方被访问到。</p><p>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	found </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h3><p>ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。还有一种复杂数据类型——<code>Object</code>，<code>Object</code> 本质上是由一组无序的名值对组成的。ECMAScript 不支持任何创建自定义类型的机制，而所有值最终都将是上述 6 种数据类型之一。</p><h4 id="typeof-操作符" tabindex="-1">typeof 操作符 <a class="header-anchor" href="#typeof-操作符" aria-hidden="true">#</a></h4><p>鉴于 ECMAScript 是松散类型的，因此需要有一种手段来检测给定变量的数据类型——<code>typeof </code>就是负责提供这方面信息的操作符。对一个值使用 <code>typeof </code> 操作符可能返回下列某个字符串：</p><ul><li><code>&quot;undefined&quot;</code>——如果这个值未定义；</li><li><code>&quot;boolean&quot;</code>——如果这个值是布尔值；</li><li><code>&quot;string&quot;</code>——如果这个值是字符串；</li><li><code>&quot;number&quot;</code>——如果这个值是数值；</li><li><code>&quot;object&quot;</code>——如果这个值是对象或 <code>null</code>；</li><li><code>&quot;function&quot;</code>——如果这个值是函数。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> message)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// &quot;string&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> (message))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// &quot;string&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">95</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;">// &quot;number&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="undefined-类型" tabindex="-1">Undefined 类型 <a class="header-anchor" href="#undefined-类型" aria-hidden="true">#</a></h4><p><code>Undefined</code> 类型只有一个值，即特殊的 <code>undefined</code>。在使用 <code>var</code> 声明变量但未对其加以初始化时，这个变量的值就是 <code>undefined</code>，例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(message </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//true</span></span>
<span class="line"></span></code></pre></div><h4 id="null-类型" tabindex="-1">Null 类型 <a class="header-anchor" href="#null-类型" aria-hidden="true">#</a></h4><p><code>Null</code> 类型是第二个只有一个值的数据类型，这个特殊的值是 <code>null</code>。从逻辑角度来看，<code>null </code> 值表示一个空对象指针，而这也正是使用 <code>typeof </code> 操作符检测 <code>null </code> 值时会返回 <code>&quot;object&quot;</code> 的原因，如下面的例子所示：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> car </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> car)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// &quot;object&quot;</span></span>
<span class="line"></span></code></pre></div><p>实际上，<code>undefined</code> 值是派生自 <code>null</code> 值的，因此 ECMA-262 规定对它们的相等性测试要返回 <code>true</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//true</span></span>
<span class="line"></span></code></pre></div><h4 id="boolean-类型" tabindex="-1">Boolean 类型 <a class="header-anchor" href="#boolean-类型" aria-hidden="true">#</a></h4><p><code>Boolean</code> 类型是 ECMAScript 中使用得最多的一种类型，该类型只有两个字面值：<code>true</code> 和 <code>false</code>。这两个值与数字值不是一回事，因此 <code>true</code> 不一定等于 <code>1</code>，而 <code>false</code> 也不一定等于 <code>0</code>。</p><p>需要注意的是，<code>Boolean</code> 类型的字面值 <code>true</code> 和 <code>false</code> 是区分大小写的。也就是说，True 和 False（以及其他的混合大小写形式）都不是 <code>Boolean</code> 值，只是标识符。</p><p>要将一个值转换为其对应的 <code>Boolean</code> 值，可以调用转型函数 <code>Boolean()</code>，如下例所示：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> messageAsBoolean </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(message)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>可以对任何数据类型的值调用 <code>Boolean()</code> 函数，而且总会返回一个 <code>Boolean</code> 值。至于返回的这个值是 <code>true </code> 还是 <code>false</code>，取决于要转换值的数据类型及其实际值。下表给出了各种数据类型及其对应的转换规则。</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">转换为true的值</th><th style="text-align:center;">转换为false的值</th></tr></thead><tbody><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">true</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">任何非空字符串</td><td style="text-align:center;">&quot; &quot; (空字符串)</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">任何非零数字值（包括无穷大）</td><td style="text-align:center;">0和NaN</td></tr><tr><td style="text-align:center;">Object</td><td style="text-align:center;">任何对象</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">—</td><td style="text-align:center;">undefined</td></tr></tbody></table><h4 id="number-类型" tabindex="-1">Number 类型 <a class="header-anchor" href="#number-类型" aria-hidden="true">#</a></h4><p>最基本的数值字面量格式是十进制整数，十进制整数可以像下面这样直接在代码中输入：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> intNum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">55</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 整数</span></span>
<span class="line"></span></code></pre></div><p>除了以十进制表示外，整数还可以通过八进制（以 8 为基数）或十六进制（以 16 为基数）的字面值来表示。八进制字面值的第一位必须是零（<code>0</code>），然后是八进制数字序列（0～7）。如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> octalNum1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">070</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 八进制的56</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> octalNum2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">079</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 无效的八进制数值——解析为79</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> octalNum3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">08</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 无效的八进制数值——解析为8</span></span>
<span class="line"></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>八进制字面量在严格模式下是无效的，会导致支持的 JavaScript 引擎抛出错误。</p></div><p>十六进制字面值的前两位必须是 <code>0x</code>，后跟任何十六进制数字（0～9 及 A～F）。其中，字母 A～F 可以大写，也可以小写。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。</p></div><p>对于浮点类型，数值特别大或特别小的情况下可以使用科学计数法表示，使用<code>E</code> 或 <code>e</code> 来表示科学计数。</p><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的最小数值保存在 <code>Number.MIN_VALUE</code> 中；能够表示的最大数值保存在 <code>Number.MAX_VALUE</code> 中。如果某次计算的结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 <code>Infinity</code> 值。具体来说，如果这个数值是负数，则会被转换成 <code>-Infinity</code>（负无穷），如果这个数值是正数，则会被转换成 <code>Infinity</code>（正无穷）。</p><blockquote><ul><li>如果某次计算返回了正或负的 <code>Infinity</code> 值，那么该值将无法继续参与下一次的计算，因为 <code>Infinity </code> 不是能够参与计算的数值。</li><li>要想确定一个数值是不是有穷的，可以使用 <code>isFinite()</code> 函数，这个函数在参数位于最小与最大数值之间时会返回 <code>true</code>。</li></ul></blockquote><p>与数字类型相对的，是非数字类型，JavaScript 对此单独用 <code>NaN</code> 来表示，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。NaN 本身有两个非同寻常的特点：</p><ul><li>任何涉及 <code>NaN</code> 的操作（例如 <code>NaN/10</code>）都会返回 <code>NaN</code>，这个特点在多步计算中有可能导致问题</li><li><code>NaN</code> 与任何值都不相等，包括 <code>NaN</code> 本身</li></ul><p>针对 <code>NaN</code> 的这两个特点，ECMAScript 定义了 <code>isNaN()</code> 函数。这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>isNaN()</code> 在接收到一个值之后，会尝试将这个值转换为数值，<code>isNaN()</code> 判断的是转换后的值是不是数字。</p></div><h4 id="string-类型" tabindex="-1">String 类型 <a class="header-anchor" href="#string-类型" aria-hidden="true">#</a></h4><p><code>String</code> 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列，即字符串。字符串可以由双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示，因此下面两种字符串的写法都是有效的：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Nicholas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Zakas</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Java</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">lang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lang </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>以上示例中的变量 <code>lang</code> 开始时包含字符串 <code>&quot;Java&quot;</code>。而第二行代码把 <code>lang</code> 的值重新定义为 <code>&quot;Java&quot;</code> 与 <code>&quot;Script&quot;</code> 的组合，即 <code>&quot;JavaScript&quot;</code>。实现这个操作的过程如下：首先创建一个能容纳 10 个字符的新字符串，然后在这个字符串中填充 <code>&quot;Java&quot;</code> 和 <code>&quot;Script&quot;</code>，最后一步是销毁原来的字符串 <code>&quot;Java&quot;</code> 和字符串 <code>&quot;Script&quot;</code>，因为这两个字符串已经没用了。这个过程是在后台发生的，而这也是在某些旧版本的浏览器中拼接字符串时速度很慢的原因所在。</p><h4 id="object-类型" tabindex="-1">Object 类型 <a class="header-anchor" href="#object-类型" aria-hidden="true">#</a></h4><p>ECMAScript 中的对象其实就是一组数据和功能的集合。对象可以通过执行 <code>new</code> 操作符后跟要创建的对象类型的名称来创建。而创建 <code>Object</code> 类型的实例并为其添加属性和（或）方法，就可以创建自定义对象。</p><p><code>Object</code> 的每个实例都具有下列属性和方法：</p><ul><li><code>constructor</code>：保存着用于创建当前对象的函数。</li><li><code>hasOwnProperty(propertyName)</code>：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（<code>propertyName</code>）必须以字符串形式指定。</li><li><code>isPrototypeOf(object)</code>：用于检查当前对象是否是传入对象的原型。</li><li><code>propertyIsEnumerable(propertyName)</code>：用于检查给定的属性是否能够使用 <code>for-in</code> 语句来枚举。与<code>hasOwnProperty()</code> 方法一样，作为参数的属性名必须以字符串形式指定。</li><li><code>toLocaleString()</code>：返回对象的字符串表示，该字符串与执行环境的地区对应。</li><li><code>toString()</code>：返回对象的字符串表示。</li><li><code>valueOf()</code>：返回对象的字符串、数值或布尔值表示。通常与 <code>toString()</code> 方法的返回值相同。</li></ul><h3 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-hidden="true">#</a></h3><h5 id="一元操作符" tabindex="-1">一元操作符 <a class="header-anchor" href="#一元操作符" aria-hidden="true">#</a></h5><ul><li>正负号：<code>+</code>、<code>-</code></li><li>自增自减：<code>++</code>、<code>--</code>，注意前置后置的区别</li></ul><h5 id="位操作符" tabindex="-1">位操作符 <a class="header-anchor" href="#位操作符" aria-hidden="true">#</a></h5><ul><li>按位非：<code>~</code></li><li>按位与：<code>&amp;</code></li><li>按位或：<code>|</code></li><li>按位异或：<code>^</code></li><li>左移：<code>&lt;&lt;</code>，以 0 填充</li><li>右移：<code>&gt;&gt;</code>，符号位填充</li><li>无符号右移：<code>&gt;&gt;&gt;</code></li></ul><h5 id="布尔操作符" tabindex="-1">布尔操作符 <a class="header-anchor" href="#布尔操作符" aria-hidden="true">#</a></h5><ul><li>逻辑非：<code>!</code></li><li>逻辑与：<code>&amp;&amp;</code></li><li>逻辑或：<code>||</code></li></ul><h5 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a></h5><ul><li>加法：<code>+</code></li><li>减法：<code>-</code></li><li>乘法：<code>*</code></li><li>除法：<code>/</code></li><li>取模：<code>%</code></li></ul><h5 id="关系操作符" tabindex="-1">关系操作符 <a class="header-anchor" href="#关系操作符" aria-hidden="true">#</a></h5><ul><li>小于：<code>&lt;</code>、<code>&lt;=</code></li><li>大于：<code>&gt;</code>、<code>&gt;=</code></li><li><strong>相等</strong>：<code>==</code>、<code>!=</code></li><li><strong>全等</strong>：<code>===</code>、<code>!==</code></li></ul><h5 id="条件操作符" tabindex="-1">条件操作符 <a class="header-anchor" href="#条件操作符" aria-hidden="true">#</a></h5><p><code>variable = boolean_expression ? true_value : false_value;</code></p><h5 id="赋值操作符" tabindex="-1">赋值操作符 <a class="header-anchor" href="#赋值操作符" aria-hidden="true">#</a></h5><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code></p><h5 id="逗号操作符" tabindex="-1">逗号操作符 <a class="header-anchor" href="#逗号操作符" aria-hidden="true">#</a></h5><p>逗号操作符多用于声明多个变量；但除此之外，逗号操作符还可以用于赋值。在用于赋值时，逗号操作符总会返回表达式中的最后一项。</p><h3 id="程序控制语句" tabindex="-1">程序控制语句 <a class="header-anchor" href="#程序控制语句" aria-hidden="true">#</a></h3><h4 id="分支结构" tabindex="-1">分支结构 <a class="header-anchor" href="#分支结构" aria-hidden="true">#</a></h4><h5 id="if-语句" tabindex="-1">if 语句 <a class="header-anchor" href="#if-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> (条件表达式) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 执行语句1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> ()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 执行语句2 </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 执行语句3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">switch</span><span style="color:#A6ACCD;">(表达式)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> value1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        执行语句1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> value2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        执行语句2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    	执行最后的语句</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>case 匹配值是是全等</strong>。</p></div><h4 id="循环结构" tabindex="-1">循环结构 <a class="header-anchor" href="#循环结构" aria-hidden="true">#</a></h4><h5 id="do-while-语句" tabindex="-1">do-while 语句 <a class="header-anchor" href="#do-while-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (条件表达式)</span></span>
<span class="line"></span></code></pre></div><h5 id="while-语句" tabindex="-1">while 语句 <a class="header-anchor" href="#while-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (条件表达式) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="for-语句" tabindex="-1">for 语句 <a class="header-anchor" href="#for-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (初始化变量</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 条件表达式</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 操作表达式) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="for-in-语句" tabindex="-1">for-in 语句 <a class="header-anchor" href="#for-in-语句" aria-hidden="true">#</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (property </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> expression) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">// 使用 property</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h5 id="label-语句" tabindex="-1">label 语句 <a class="header-anchor" href="#label-语句" aria-hidden="true">#</a></h5><p>使用label 语句可以在代码中添加标签，以便将来使用。以下是label 语句的语法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> statement</span></span>
<span class="line"></span></code></pre></div><p>下面是一个示例：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这个例子中定义的 <code>start </code> 标签可以在将来由 <code>break </code> 或 <code>continue </code> 语句引用。加标签的语句一般都要与 <code>for </code> 语句等循环语句配合使用。</p><h5 id="break-和-continue-语句" tabindex="-1">break 和 continue 语句 <a class="header-anchor" href="#break-和-continue-语句" aria-hidden="true">#</a></h5><ul><li><code>continue</code>：跳过最近一层的本次循环</li><li><code>break</code>：跳出当前最近一层循环，如果要跳出多层循环，要配合 label 语句使用</li></ul><h5 id="with-语句" tabindex="-1">with 语句 <a class="header-anchor" href="#with-语句" aria-hidden="true">#</a></h5><p><code>with</code> 语句的作用是将代码的作用域设置到一个特定的对象中。<code>with</code> 语句的语法如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> (expression)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">statement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>定义 <code>with</code> 语句的目的主要是为了简化多次编写同一个对象的工作，如下面的例子所示：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> qs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">search</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> hostName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hostname</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面几行代码都包含 <code>location</code> 对象。如果使用 <code>with</code> 语句，可以把上面的代码改写成如下所示：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;">(location)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">qs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">search</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hostName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hostname</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">href</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个重写后的例子中，使用 <code>with</code> 语句关联了 <code>location</code> 对象。这意味着在 <code>with</code> 语句的代码块内部，每个变量首先被认为是一个局部变量，而如果在局部环境中找不到该变量的定义，就会查询 <code>location</code> 对象中是否有同名的属性。如果发现了同名属性，则以 <code>location </code> 对象属性的值作为变量的值。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>严格模式下不允许使用with 语句，否则将视为语法错误。</p></div><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-hidden="true">#</a></h3><h4 id="函数的声明与调用" tabindex="-1">函数的声明与调用 <a class="header-anchor" href="#函数的声明与调用" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 函数声明</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">函数名</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">参数列表</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">函数体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> 函数名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">参数列表</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">函数体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 函数调用</span></span>
<span class="line"><span style="color:#82AAFF;">函数名</span><span style="color:#A6ACCD;">(参数列表)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="函数形参和实参的匹配" tabindex="-1">函数形参和实参的匹配 <a class="header-anchor" href="#函数形参和实参的匹配" aria-hidden="true">#</a></h4><ul><li><p>形参和实参数量一致</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getSum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 3</span></span>
<span class="line"></span></code></pre></div></li><li><p>实参个数多于形参个数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getSum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 3</span></span>
<span class="line"></span></code></pre></div><p>此时超出部分被无视掉</p></li><li><p>形参个数多于实参个数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getSum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// NaN</span></span>
<span class="line"></span></code></pre></div></li></ul><h4 id="return-返回值" tabindex="-1">return 返回值 <a class="header-anchor" href="#return-返回值" aria-hidden="true">#</a></h4><ul><li><code>return</code> 后面的语句不会被执行</li><li><code>return</code> 只能返回一个值，如果返回了多个值，以最后一个值为准</li><li>如果函数没有 <code>return</code>，则返回 <code>undefined</code></li></ul><h4 id="arguments-的使用" tabindex="-1">arguments 的使用 <a class="header-anchor" href="#arguments-的使用" aria-hidden="true">#</a></h4><p>当我们不确定有多少参数与参数传递的时候，可以用 <code>arguments</code> 来获取。在 JavaScript 中，<code>arguments</code> 实际上它是当前函数的一个内置对象。所有函数都内置了一个 <code>arguments</code> 对象，<code>arguments</code> 对象中存储了传递的所有实参。</p><p><code>arguments</code> 展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li>具有 <code>length</code> 属性</li><li>按索引方式存储数据，允许方括号访问</li><li>不具有数组的 <code>push</code>，<code>pop</code> 方法</li></ul><h2 id="变量、作用域和内存问题" tabindex="-1">变量、作用域和内存问题 <a class="header-anchor" href="#变量、作用域和内存问题" aria-hidden="true">#</a></h2><h3 id="基本类型和引用类型的值" tabindex="-1">基本类型和引用类型的值 <a class="header-anchor" href="#基本类型和引用类型的值" aria-hidden="true">#</a></h3><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。<strong>基本类型</strong>值指的是简单的数据段，而<strong>引用类型</strong>值指那些可能由多个值构成的对象。</p><p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。</p><h5 id="动态的属性" tabindex="-1">动态的属性 <a class="header-anchor" href="#动态的属性" aria-hidden="true">#</a></h5><p>定义基本类型值和引用类型值的方式是类似的：创建一个变量并为该变量赋值。但是，当这个值保存到变量中以后，对不同类型值可以执行的操作则大相径庭。<strong>对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法</strong>。</p><h5 id="复制变量值" tabindex="-1">复制变量值 <a class="header-anchor" href="#复制变量值" aria-hidden="true">#</a></h5><p>如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。</p><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Nicholas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &quot;Nicholas&quot;</span></span>
<span class="line"></span></code></pre></div><p><img src="`+o+`" alt=""></p><h5 id="传递参数" tabindex="-1">传递参数 <a class="header-anchor" href="#传递参数" aria-hidden="true">#</a></h5><p>ECMAScript 中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。<strong>基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样</strong>。有不少开发人员在这一点上可能会感到困惑，因为访问变量有按值和按引用两种方式，而参数只能按值传递。</p><h3 id="执行环境及作用域" tabindex="-1">执行环境及作用域 <a class="header-anchor" href="#执行环境及作用域" aria-hidden="true">#</a></h3><p>执行环境（execution context，为简单起见，有时也称为“<strong>环境</strong>”）是 JavaScript 中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的<strong>变量对象</strong>（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</p><p>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境不同，表示执行环境的对象也不一样。在 Web 浏览器中，全局执行环境被认为是 window 对象，因此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境</strong>。</p></div><p>当代码在一个环境中执行时，会创建变量对象的一个<strong>作用域链</strong>（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）</strong>。</p></div><h3 id="预解析" tabindex="-1">预解析 <a class="header-anchor" href="#预解析" aria-hidden="true">#</a></h3><p>JavaScript 引擎运行代码分为两步： 预解析和代码执行</p><ol><li><p>预解析</p><p>JavaScript 引擎会把 JavaScript 里所有的 变量和函数定义提升到当前作用域的最前面</p></li><li><p>代码执行</p><p>按照代码书写的顺序从上往下执行</p></li></ol><p>预解析分为<strong>变量预解析</strong>（<strong>变量提升</strong>）和<strong>函数预解析</strong>（<strong>函数提升</strong>）</p><ul><li><strong>变量提升</strong>就是把所有的变量声明提升到<strong>当前作用域</strong>最前，<strong>不提升赋值操作</strong></li><li><strong>函数提升</strong>就是把所有的函数声明提升到<strong>当前用域</strong>最前面，<strong>不调用函数</strong></li></ul><p>【例】</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>相当于以下代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">     </span><span style="color:#676E95;">// undefined</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">     </span><span style="color:#676E95;">// 20</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="垃圾收集" tabindex="-1">垃圾收集 <a class="header-anchor" href="#垃圾收集" aria-hidden="true">#</a></h3><h4 id="标记清除" tabindex="-1">标记清除 <a class="header-anchor" href="#标记清除" aria-hidden="true">#</a></h4><p>JavaScript 中最常用的垃圾收集方式是<strong>标记清除</strong>（mark-and-sweep）。当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p><p>可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境，或者使用一个“进入环境的”变量列表及一个“离开环境的”变量列表来跟踪哪个变量发生了变化。说到底，如何标记变量其实并不重要，关键在于采取什么策略。</p><p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p><h4 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-hidden="true">#</a></h4><p>另一种不太常见的垃圾收集策略叫做<strong>引用计数</strong>（reference counting）。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 1。如果同一个值又被赋给另一个变量，则该值的引用次数加 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>无法解决循环引用问题。</p></div>`,179),c=[e];function t(r,i,d,y,D,F){return a(),n("div",null,c)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
